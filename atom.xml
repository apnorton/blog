<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>apnorton | blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://www.apnorton.com/blog/"/>
  <updated>2017-11-25T19:09:37.770Z</updated>
  <id>http://www.apnorton.com/blog/</id>
  
  <author>
    <name>Andrew Norton</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Raspberry Pi Default Groups</title>
    <link href="http://www.apnorton.com/blog/2017/11/25/Raspberry-Pi-Default-Groups/"/>
    <id>http://www.apnorton.com/blog/2017/11/25/Raspberry-Pi-Default-Groups/</id>
    <published>2017-11-25T18:54:28.000Z</published>
    <updated>2017-11-25T19:09:37.770Z</updated>
    
    <content type="html">&lt;p&gt;In setting up my Raspberry Pi for a home fileshare, I noticed the &lt;code&gt;pi&lt;/code&gt; user is a part of several default groups.  These are:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pi adm dialout cdrom sudo &lt;span class=&quot;selector-tag&quot;&gt;audio&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;video&lt;/span&gt; plugdev games users &lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt; netdev gpio i2c spi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(I’m using the 2017-09-07 image of Raspbian Stretch Lite.)&lt;/p&gt;
&lt;p&gt;This looked like a lot of groups to me!  To make sure my new user only has the minimum permissions needed, let’s look at the what each group is and why it’s there.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Group-Descriptions&quot;&gt;&lt;a href=&quot;#Group-Descriptions&quot; class=&quot;headerlink&quot; title=&quot;Group Descriptions&quot;&gt;&lt;/a&gt;Group Descriptions&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Name&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;pi&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;User-specific group.  A group is automatically created for each new user; you can ignore this.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;adm&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Allows access to log files in &lt;code&gt;/var/log&lt;/code&gt; and using &lt;code&gt;xconsole&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;dialout&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Allows access to serial ports/modem reconfiguration, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;cdrom&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Uncreatively, this group enables access to optical drives.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;sudo&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Enables &lt;code&gt;sudo&lt;/code&gt; access for the user.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;audio&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Allows access to audio devices like microphones and soundcards&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;video&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Allows graphics card/webcam access.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;plugdev&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Enables access to external storage devices&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;games&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;I’m unsure of this.  No files belong to this group by default, and I cannot find references to it online.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;users&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Appears to be a Pi-specific group enabling access to &lt;code&gt;/opt/vc/src/hello_pi/&lt;/code&gt; directory and contained files.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;input&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Appears to give access to the &lt;code&gt;/dev/input/mice&lt;/code&gt; folder and nothing else.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;netdev&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Enables access to network interfaces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;gpio&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Pi-specific group for GPIO pin access.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;i2c&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Similar to the above, but for I2C access. Generated after installing &lt;code&gt;i2c-tools&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;spi&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Similar to the above, but for the SPI bus.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So, based on my application (and future use of the Pi), I’m not adding the &lt;code&gt;cdrom&lt;/code&gt;, &lt;code&gt;games&lt;/code&gt;, and &lt;code&gt;users&lt;/code&gt; groups to my new user.&lt;/p&gt;
&lt;h2 id=&quot;Helpful-Resources&quot;&gt;&lt;a href=&quot;#Helpful-Resources&quot; class=&quot;headerlink&quot; title=&quot;Helpful Resources&quot;&gt;&lt;/a&gt;Helpful Resources&lt;/h2&gt;&lt;p&gt;The above descriptions were sourced based on the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.debian.org/SystemGroups&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SystemGroups - Debian Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.ubuntu.com/Security/Privileges&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Privileges - Ubuntu Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Molloy, Derek.  &lt;em&gt;Exploring Raspberry Pi: Interfacing to the Real World with Embedded Linux.&lt;/em&gt; &lt;a href=&quot;https://books.google.com/books?id=ro0gCwAAQBAJ&amp;amp;pg=PA270&amp;amp;lpg=PA270&amp;amp;source=bl&amp;amp;ots=0T50hVUvy5&amp;amp;sig=6n_Hi0U2rCyu7pvx5LUqXJfDhbE&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjG6qGorNrXAhUNRN8KHcndBDQQ6AEISTAE#v=onepage&amp;amp;q&amp;amp;f=false&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Page 270&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/forums/viewtopic.php?p=158107#p158107&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;I2C group discussion on Raspberry Pi forums&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;In setting up my Raspberry Pi for a home fileshare, I noticed the &lt;code&gt;pi&lt;/code&gt; user is a part of several default groups.  These are:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pi adm dialout cdrom sudo &lt;span class=&quot;selector-tag&quot;&gt;audio&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;video&lt;/span&gt; plugdev games users &lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt; netdev gpio i2c spi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(I’m using the 2017-09-07 image of Raspbian Stretch Lite.)&lt;/p&gt;
&lt;p&gt;This looked like a lot of groups to me!  To make sure my new user only has the minimum permissions needed, let’s look at the what each group is and why it’s there.&lt;/p&gt;
    
    </summary>
    
      <category term="electronics" scheme="http://www.apnorton.com/blog/categories/electronics/"/>
    
      <category term="raspberry-pi" scheme="http://www.apnorton.com/blog/categories/electronics/raspberry-pi/"/>
    
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/tags/computer-science/"/>
    
      <category term="general-computing" scheme="http://www.apnorton.com/blog/tags/general-computing/"/>
    
      <category term="hardware" scheme="http://www.apnorton.com/blog/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>How to Request a Regrade</title>
    <link href="http://www.apnorton.com/blog/2017/07/04/How-to-Request-a-Regrade/"/>
    <id>http://www.apnorton.com/blog/2017/07/04/How-to-Request-a-Regrade/</id>
    <published>2017-07-04T21:02:25.000Z</published>
    <updated>2017-07-04T21:02:25.821Z</updated>
    
    <content type="html">&lt;p&gt;One of the highlights of my time at UVA was working as a teaching assistant for the computer science department.  In this capacity, I proctored labs and exams, held office hours, created exam questions, and even graded homework and exams.  Due, in part, to the large class sizes of our introductory courses and the necessity of multiple graders for each assignment, most professors have a “regrade” policy – if the grader has made an error in grading a student’s work, there is a formal process for the student to request a second look at his or her work.&lt;/p&gt;
&lt;p&gt;For CS 2150 (the course I TA’d), I was one of two or three TAs who processed most – if not all – of the regrades for exams in the past two semesters.  Although grades are ideally determined solely by the answer’s merit, there are a few simple ways you can make your grader’s life easier. (And that’s always a good thing, right?)&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Be-Brief&quot;&gt;&lt;a href=&quot;#Be-Brief&quot; class=&quot;headerlink&quot; title=&quot;Be Brief&quot;&gt;&lt;/a&gt;Be Brief&lt;/h2&gt;&lt;p&gt;Graders for every course, even technical ones, read a &lt;em&gt;lot&lt;/em&gt; of student-generated text.  In a class of around 300 students, we may receive 60 to 100 regrade requests per exam.  (This is not to say have a 1/6 to 1/3 error rate in grading, but rather that we receive a lot of frivolous regrades – more on that later.)  If every student writes four or five paragraphs explaining why they got &lt;code&gt;101101&lt;/code&gt; instead of &lt;code&gt;101100&lt;/code&gt; as the base-two representation of some number, it becomes hard to separate important points from unimportant ones.  Thus, my first recommendation is to &lt;em&gt;be brief&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Of course, there is a difference between “brief” and “short.”  Receiving “regrade plz” is just as bad, if not worse, than recieving two pages on how you forgot a trivial detail of a problem.  My Science, Technology, and Society professor put it well: when you hear &lt;em&gt;brief&lt;/em&gt;, think &lt;em&gt;economical&lt;/em&gt;.  Maximize the “signal to noise” ratio of your regrade request – bullet points are your friend!&lt;/p&gt;
&lt;h2 id=&quot;Be-Informed&quot;&gt;&lt;a href=&quot;#Be-Informed&quot; class=&quot;headerlink&quot; title=&quot;Be Informed&quot;&gt;&lt;/a&gt;Be Informed&lt;/h2&gt;&lt;p&gt;Many courses have a &lt;em&gt;grading rubric&lt;/em&gt; that describe how many points each part of an assignment is worth.  Exhibiting familiarity with this document by referencing relevant parts is great when writing a regrade request; this helps you be brief and shows the TA that you have some understanding of how many points your answer should be worth.  It’s surprising the number of students, puzzled over their denied regrade, I’ve spoken with in office hours only to find that they never read the grading guidelines.  Knowing what each part of the question is worth is invaluable in discussing regrades.&lt;/p&gt;
&lt;h2 id=&quot;Don’t-Complain&quot;&gt;&lt;a href=&quot;#Don’t-Complain&quot; class=&quot;headerlink&quot; title=&quot;Don’t Complain&quot;&gt;&lt;/a&gt;Don’t Complain&lt;/h2&gt;&lt;p&gt;I realize that we are humans and make mistakes.  I also realize that it’s very stressful and can feel insulting when one of your assignments has been graded improperly – believe me, I’ve been there!  However, venting this frustration in your regrade request does not help the grader sympathize with your cause.  Insulting the person who originally graded you, acting “entitled” to points (regardless of whether or not you actually are), and other forms of complaining do not endear yourself to your grader.  Acting humble (but not overly so, of course) goes a long way in getting the grader to subconsciously want you to get a higher grade.&lt;/p&gt;
&lt;h2 id=&quot;Don’t-Be-Wrong&quot;&gt;&lt;a href=&quot;#Don’t-Be-Wrong&quot; class=&quot;headerlink&quot; title=&quot;Don’t Be Wrong&quot;&gt;&lt;/a&gt;Don’t Be Wrong&lt;/h2&gt;&lt;p&gt;No, I’m not going to give some cheesy advice about not missing the question in the first place.  What I mean by “don’t be wrong” is really “don’t be wrong a &lt;em&gt;second&lt;/em&gt; time.”  Double and triple-check your work before submitting a regrade – nothing is more embarassing than writing a long explanation on why your answer is correct, only to be disproved with a short response from the TA!  Consult your textbook and discuss with your friends (or possibly the TAs) before submitting a regrade to reduce the likelihood it gets rejected.&lt;/p&gt;
&lt;p&gt;While getting an “wrong” regrade can be mildly frustrating to a TA, we don’t really mind; after all, everyone makes mistakes and things like that occasionally slip through.  However, one of the few ways to actually make a grader upset is to &lt;em&gt;knowingly&lt;/em&gt; submit wrong work and act as if it’s correct. Please don’t do this.  (I won’t write more; since this takes conscious effort to perform, I’ll assume those who are doing it can stop without much instruction.)  Also in this category is “grade grubbing;” if your work is wrong and you’ve gotten what the rubric says you should get, don’t submit a regrade request asking for more points than your answer merits!&lt;/p&gt;
&lt;h2 id=&quot;Summary-Please-Respect-our-Time&quot;&gt;&lt;a href=&quot;#Summary-Please-Respect-our-Time&quot; class=&quot;headerlink&quot; title=&quot;Summary: Please Respect our Time&quot;&gt;&lt;/a&gt;Summary: Please Respect our Time&lt;/h2&gt;&lt;p&gt;This is a lot of words to basically say: make your work quick to grade.  We (your graders) are busy.  We’re either students with coursework and/or research to do, or we’re professors who have lectures to prep, office hours to hold, and meetings to attend.  The fact that you’re requesting a regrade means that we already saw your paper once.  Considered together, these factors mean that the less time we have to spend handling regrade requests, the better off everyone is.  &lt;/p&gt;
&lt;p&gt;Yes, as graders it is our job to grade your work correctly.  Yes, if we messed up your grade, we do want to fix it!  But, if you can make it so it’s really fast and easy to see why you need points back, it makes our life so much easier.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;One of the highlights of my time at UVA was working as a teaching assistant for the computer science department.  In this capacity, I proctored labs and exams, held office hours, created exam questions, and even graded homework and exams.  Due, in part, to the large class sizes of our introductory courses and the necessity of multiple graders for each assignment, most professors have a “regrade” policy – if the grader has made an error in grading a student’s work, there is a formal process for the student to request a second look at his or her work.&lt;/p&gt;
&lt;p&gt;For CS 2150 (the course I TA’d), I was one of two or three TAs who processed most – if not all – of the regrades for exams in the past two semesters.  Although grades are ideally determined solely by the answer’s merit, there are a few simple ways you can make your grader’s life easier. (And that’s always a good thing, right?)&lt;/p&gt;
    
    </summary>
    
      <category term="opinion" scheme="http://www.apnorton.com/blog/categories/opinion/"/>
    
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/tags/computer-science/"/>
    
      <category term="opinion" scheme="http://www.apnorton.com/blog/tags/opinion/"/>
    
      <category term="education" scheme="http://www.apnorton.com/blog/tags/education/"/>
    
  </entry>
  
  <entry>
    <title>A Brief Exploration of a Möbius Transformation</title>
    <link href="http://www.apnorton.com/blog/2017/04/18/A-Brief-Exploration-of-a-Mobius-Transformation/"/>
    <id>http://www.apnorton.com/blog/2017/04/18/A-Brief-Exploration-of-a-Mobius-Transformation/</id>
    <published>2017-04-19T00:05:42.000Z</published>
    <updated>2017-04-19T00:15:50.918Z</updated>
    
    <content type="html">&lt;p&gt;As part of a recent homework set in my complex analysis course, I was tasked with a problem that required a slight generalization on part of &lt;a href=&quot;http://mathworld.wolfram.com/SchwarzsLemma.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Schwarz’s Lemma&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lemma (Schwarz):&lt;/strong&gt; Let $f$ be analytic on the unit disk with $|f(z)| \leq 1$ for all $z$ on the disk and $f(0) = 0$.  Then $|f(z)| &amp;lt; |z|$ and $f’(0)\leq 1$.&lt;br&gt;If either $|f(z)|=|z|$ for some $z\neq0$ or if $|f’(0)|=1$, then $f$ is a rotation, i.e., $f(z)=az$ for some complex constant $a$ with $|a|=1$. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The homework assignment asked us (within the context of a larger problem) to consider the case when $f(\zeta) = 0$ for some $\zeta \neq 0$ on the interior of the unit disk.  The secret to this problem was to find some analytic function $\varphi$ that maps the unit disk to itself, but &lt;em&gt;swaps&lt;/em&gt; $0$ and $\zeta$.  Then, we may consider $\varphi^{-1}\circ f\circ \varphi$ and apply Schwarz’s Lemma.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Properties-of-the-transformation&quot;&gt;&lt;a href=&quot;#Properties-of-the-transformation&quot; class=&quot;headerlink&quot; title=&quot;Properties of the transformation&quot;&gt;&lt;/a&gt;Properties of the transformation&lt;/h2&gt;&lt;p&gt;The appropriate map, which is a particular Möbius transformation, is given by the following:&lt;/p&gt;
&lt;p&gt;$$\varphi_\zeta(z) = \frac{\zeta - z}{1-\overline{\zeta}z}$$&lt;/p&gt;
&lt;p&gt;Now, if $|z| = 1$, then $|\varphi_\zeta(z)| = |\overline{z} \varphi_\zeta(z)| = \left|\frac{\overline{z}\zeta-1}{1-\overline{\zeta}z}\right| = 1$.  Therefore, this map takes the boundary of the unit disk to itself.&lt;/p&gt;
&lt;p&gt;Further, this $\varphi_\zeta$ is analytic within the unit disk, as its only singularity occurs when $|z| &amp;gt; 1$ (since this occurs when $z = \frac{1}{\overline{\zeta}}$ and $\left|\overline{\zeta}\right| &amp;lt; 1$).  And, finally, since $\varphi_\zeta$ is non-constant, the &lt;a href=&quot;http://mathworld.wolfram.com/MaximumModulusPrinciple.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;maximum modulus principle&lt;/a&gt; tells us that $|\varphi_\zeta(z)| &amp;lt; 1$ when $|z| &amp;lt; 1$.  &lt;/p&gt;
&lt;p&gt;Therefore, $\varphi_\zeta$ maps the unit disk onto itself, where $\varphi_\zeta(\zeta) = 0$ and $\varphi_\zeta(0) = \zeta$.&lt;/p&gt;
&lt;p&gt;Another useful feature of this map is that it is an involution.   That is, $\varphi_\zeta^{-1} = \varphi_\zeta$.  An application of Schwarz’s Lemma shows this immediately: since $\varphi\circ\varphi$ fixes &lt;em&gt;two&lt;/em&gt; points in the unit disk (one of them zero) and satisfies the modulus bound, we can conclude that $\varphi\circ\varphi$ is the identity.  Therefore, $\varphi$ is its own inverse.&lt;/p&gt;
&lt;h2 id=&quot;Impact-of-this-map-on-the-unit-disk&quot;&gt;&lt;a href=&quot;#Impact-of-this-map-on-the-unit-disk&quot; class=&quot;headerlink&quot; title=&quot;Impact of this map on the unit disk&quot;&gt;&lt;/a&gt;Impact of this map on the unit disk&lt;/h2&gt;&lt;p&gt;I was curious what this mapping does to the values on the unit disk.  We’ve clearly swapped $\zeta$ and $0$, but the map must maintain analyticity on the unit disk, so it must do more than just that.  I wanted to know how this distortion affects the rest of the values on the disk.  So, I wrote a quick Python program to generate a couple of plots:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; cmath &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; phase &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; arg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Create a 2D grid on which to evaluate the function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xs = np.linspace(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, num = &lt;span class=&quot;number&quot;&gt;700&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ys = np.linspace(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, num = &lt;span class=&quot;number&quot;&gt;700&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X, Y = np.meshgrid(xs, ys)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Round it off to be only the unit circle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r = np.sqrt(X**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + Y**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X = np.ma.masked_where(r &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, X)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Y = np.ma.masked_where(r &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, Y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# The new &quot;zeta&quot; value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zeta = &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.38j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# The involution, phi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@np.vectorize&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;phi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(z)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (zeta - z) / (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-zeta.conjugate()*z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vabs = np.vectorize(abs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;varg = np.vectorize(arg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Determine the argument and modulus of points on the unit circle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Z  = X+Y*&lt;span class=&quot;number&quot;&gt;1.0j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F1 = vabs(phi(Z))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F2 = vabs(Z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F3 = varg(phi(Z))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F4 = varg(Z)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Plot them all!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F = [F1, F2, F3, F4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fig, axes = plt.subplots(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;titles = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;|$\\varphi_\\zeta(z)$|&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;|$z$|&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Arg$(\\varphi_\\zeta(z))$&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Arg$(z)$&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = np.linspace(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*pi, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, ax &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(np.reshape(axes, (&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,))):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# draw the heatmap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ax.pcolormesh(X, Y, F[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# draw bounding circle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ax.plot(np.cos(t), np.sin(t), linewidth=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, color=&lt;span class=&quot;string&quot;&gt;&#39;black&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# adjust the axis labels&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ax.set_aspect(&lt;span class=&quot;string&quot;&gt;&#39;equal&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ax.set_xlim(&lt;span class=&quot;number&quot;&gt;-1.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ax.set_ylim(&lt;span class=&quot;number&quot;&gt;-1.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ax.set_title(titles[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.tight_layout() &lt;span class=&quot;comment&quot;&gt;# helps with spacing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Below, we’ve plotted the magnitude and argument (angle) of $z$ and $\varphi_\zeta(z)$ side-by-side.  We can now see that, in terms of magnitude, it’s just as if the map “shifted” over the origin, squeezing and pulling the surrounding values to maintain analyticity.  However, it also &lt;em&gt;twisted and reflected&lt;/em&gt; the values of $z$ on each circle around the origin.  (This can be seen through the curve of the $\mathrm{Arg}(\varphi_\zeta(z))$ plot.)&lt;/p&gt;
&lt;img src=&quot;/blog/2017/04/18/A-Brief-Exploration-of-a-Mobius-Transformation/plots.png&quot; alt=&quot;Resulting plots&quot; title=&quot;Resulting plots&quot;&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;This doesn’t really serve much purpose in and of itself, but it helped build my intuition of what is happening when I apply the function $\varphi$ and developed my abilities in &lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;matplotlib&lt;/code&gt; usage.  The Schwarz Lemma is an interesting topic in Complex Analysis, and I based some of my initial work on a 2010 paper by Dr. Harold P. Boas, entitled &lt;a href=&quot;https://arxiv.org/abs/1001.0559&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Julius and Julia: Mastering the art of the Schwarz lemma&lt;/em&gt;&lt;/a&gt;.  Of particular note is “Section 3: Change of Base Point,” where he develops and discusses the map $\varphi$.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;As part of a recent homework set in my complex analysis course, I was tasked with a problem that required a slight generalization on part of &lt;a href=&quot;http://mathworld.wolfram.com/SchwarzsLemma.html&quot;&gt;Schwarz’s Lemma&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lemma (Schwarz):&lt;/strong&gt; Let $f$ be analytic on the unit disk with $|f(z)| \leq 1$ for all $z$ on the disk and $f(0) = 0$.  Then $|f(z)| &amp;lt; |z|$ and $f’(0)\leq 1$.&lt;br&gt;If either $|f(z)|=|z|$ for some $z\neq0$ or if $|f’(0)|=1$, then $f$ is a rotation, i.e., $f(z)=az$ for some complex constant $a$ with $|a|=1$. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The homework assignment asked us (within the context of a larger problem) to consider the case when $f(\zeta) = 0$ for some $\zeta \neq 0$ on the interior of the unit disk.  The secret to this problem was to find some analytic function $\varphi$ that maps the unit disk to itself, but &lt;em&gt;swaps&lt;/em&gt; $0$ and $\zeta$.  Then, we may consider $\varphi^{-1}\circ f\circ \varphi$ and apply Schwarz’s Lemma.&lt;/p&gt;
    
    </summary>
    
      <category term="math" scheme="http://www.apnorton.com/blog/categories/math/"/>
    
      <category term="calculus" scheme="http://www.apnorton.com/blog/categories/math/calculus/"/>
    
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>How I wrote a GroupMe Chatbot in 24 hours</title>
    <link href="http://www.apnorton.com/blog/2017/02/28/How-I-wrote-a-Groupme-Chatbot-in-24-hours/"/>
    <id>http://www.apnorton.com/blog/2017/02/28/How-I-wrote-a-Groupme-Chatbot-in-24-hours/</id>
    <published>2017-03-01T04:05:39.000Z</published>
    <updated>2017-03-01T04:10:22.519Z</updated>
    
    <content type="html">&lt;p&gt;For the past couple years, I have worked as a teaching assistant for UVa’s CS 2150 (Program and Data Representation) course.  We recently started a &lt;a href=&quot;https://groupme.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GroupMe&lt;/a&gt; chat for the course staff, and I thought it would be fun to create a chatbot to help remind all the TAs to submit timesheets, keep track of when people are holding office hours, and remember when/where TA meetings are being held.  Setting up a basic chatbot is a lot simpler than it sounds and is really fun–I wrote my bot from scratch using Python in just one day.&lt;/p&gt;
&lt;img src=&quot;/blog/2017/02/28/How-I-wrote-a-Groupme-Chatbot-in-24-hours/screenshot.png&quot; alt=&quot;The 2150 chatbot&quot; title=&quot;The 2150 chatbot&quot;&gt;
&lt;h2 id=&quot;GroupMe-Bot-Overview&quot;&gt;&lt;a href=&quot;#GroupMe-Bot-Overview&quot; class=&quot;headerlink&quot; title=&quot;GroupMe Bot Overview&quot;&gt;&lt;/a&gt;GroupMe Bot Overview&lt;/h2&gt;&lt;p&gt;GroupMe has a very &lt;a href=&quot;https://dev.groupme.com/tutorials/bots&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;brief tutorial&lt;/a&gt; explaining how their API may be used for bots.  The easiest way to create a bot is through their &lt;a href=&quot;https://dev.groupme.com/bots/new&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;web form&lt;/a&gt;, which prompts you for the bot’s name, callback URL (technically optional, but you want it), avatar URL (optional), and the name of the group where the bot will live.  Once you’ve done this, you will be given a unique bot ID token.  Anyone with this token can pretend to be your bot, so keep it safe.  (Security is somewhat laughable here: your bot asserts its ID and the server believes it with no “login” procedure.)  We’ll talk more about the callback URL in a moment; for now, just leave it blank.&lt;/p&gt;
&lt;p&gt;Once you’ve done these steps, you have created a bot–as far as GroupMe is concerned.  If you send a specifically formatted JSON mssage, the newly created bot will post in your group.  However, if left at this point, your “bot” is little more than a proxy for human-written messages submitted with &lt;code&gt;curl&lt;/code&gt;.  Your bot needs some way of reading messages sent to the group, formulating a response, and only then sending messages to the GroupMe servers.  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;This communication is performed using HTTP POST requests carrying JSON data between your bot and the server.  Every time a message is sent to your bot’s group, GroupMe POSTs the data to the callback URL you specified above.  When your bot wants to respond, it POSTs its response to &lt;code&gt;https://api.groupme.com/v3/bots/post&lt;/code&gt;.&lt;/p&gt;
&lt;img src=&quot;/blog/2017/02/28/How-I-wrote-a-Groupme-Chatbot-in-24-hours/communication.png&quot; alt=&quot;Looks simple enough...&quot; title=&quot;Looks simple enough...&quot;&gt;
&lt;p&gt;We’ll take a closer look at the JSON format when our bot is ready to send messages.  The important thing here is that your bot needs to 1) have a public-facing URL and 2) can process POST requests.  To avoid security headaches or the possibility of downtime, running your bot in the cloud is a good approach.&lt;/p&gt;
&lt;h2 id=&quot;Heroku-A-cloud-solution&quot;&gt;&lt;a href=&quot;#Heroku-A-cloud-solution&quot; class=&quot;headerlink&quot; title=&quot;Heroku: A cloud solution&quot;&gt;&lt;/a&gt;Heroku: A cloud solution&lt;/h2&gt;&lt;p&gt;For my bot (and the rest of the tutorial), I used the &lt;a href=&quot;https://heroku.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heroku&lt;/a&gt; platform for hosting.  I had two primary criterion for selecting a cloud platform for my chatbot.  First, it had to be free or &lt;em&gt;really&lt;/em&gt; cheap.  I’m a student and this is a “for fun” project, so I’m not going to be spending money for full server or something like that.  Heroku has a free tier with 1000 hours of computation time per account per month, which is more than sufficient for the purposes of a hobby chatbot.  Second, it needed an easy way to listen for visits to the callback URL.  It turns out that it’s fairly simple to set up a stripped-down server in Python with Gunicorn and Flask for integration with Heroku.  You can likely follow a similar process with AWS, Azure, or some other cloud service, though.&lt;/p&gt;
&lt;p&gt;Heroku deployment operates through &lt;code&gt;git&lt;/code&gt; pushes.  I recommend &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;installing the CLI&lt;/a&gt;, as it allows fast access to log information.  Using this tool, you automatically create a &lt;code&gt;heroku&lt;/code&gt; remote for your project’s git repository, then do &lt;code&gt;git push heroku [branch-name]&lt;/code&gt; to update the running version of your app.  Since I already use git for all my projects, this is a nice integration to have.&lt;/p&gt;
&lt;p&gt;After installing the Heroku CLI, run the following commands in your terminal to create your bot app:&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;mkdir apnorton-demo-bot &lt;span class=&quot;comment&quot;&gt;# folder for your git repository&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;cd apnorton-demo-bot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;git init .              &lt;span class=&quot;comment&quot;&gt;# create a new git repository&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;heroku &lt;span class=&quot;symbol&quot;&gt;apps:&lt;/span&gt;create apnorton-demo-bot &lt;span class=&quot;comment&quot;&gt;# create heroku app &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ &lt;/span&gt;git remote              &lt;span class=&quot;comment&quot;&gt;# should show one remote target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(Of course, you should use a name different from &lt;code&gt;apnorton-demo-bot&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;After running the &lt;code&gt;heroku apps:create ...&lt;/code&gt; step, you will see two URLs printed as output; the first is the public-facing address of your server.  This should be placed in the “callback URL” in the GroupMe settings for your chatbot.  If you now login to Heroku, you will see your newly created app in your dashboard.  Heroku also needs some configuration files to successfully launch your bot (names are exactly as below) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Procfile&lt;/code&gt; : commands Heroku should use to launch your app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runtime.txt&lt;/code&gt; : specifies a particular version of Python&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt; : any &lt;code&gt;pip&lt;/code&gt; packages that need to be installed &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These will likely be super simple for your bot; here are the options I used for each:&lt;/p&gt;
&lt;h3 id=&quot;Procfile&quot;&gt;&lt;a href=&quot;#Procfile&quot; class=&quot;headerlink&quot; title=&quot;Procfile&quot;&gt;&lt;/a&gt;Procfile&lt;/h3&gt;&lt;p&gt;This starts up the gunicorn-based Python webserver and prints all log information to standard out.&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;web: gunicorn &lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt; --&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;=-&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;runtime-txt&quot;&gt;&lt;a href=&quot;#runtime-txt&quot; class=&quot;headerlink&quot; title=&quot;runtime.txt&quot;&gt;&lt;/a&gt;runtime.txt&lt;/h3&gt;&lt;p&gt;I prefer Python 3, so that’s the runtime I specified for my bot.  If the runtime is not specified, Heroku defaults to Python 2 (as of this writing).&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;python-3&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.6&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;requirements-txt&quot;&gt;&lt;a href=&quot;#requirements-txt&quot; class=&quot;headerlink&quot; title=&quot;requirements.txt&quot;&gt;&lt;/a&gt;requirements.txt&lt;/h3&gt;&lt;p&gt;The gunicorn package provides a lightweight server, while Flask is a framework to handle the incoming HTTP requests.  You can require other packages, too, but these two are the most basic requirements:&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Flask&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;0.12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;gunicorn&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;19.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Core-Functionality-Python&quot;&gt;&lt;a href=&quot;#Core-Functionality-Python&quot; class=&quot;headerlink&quot; title=&quot;Core Functionality: Python&quot;&gt;&lt;/a&gt;Core Functionality: Python&lt;/h2&gt;&lt;p&gt;Now that you’ve set up the Heroku server, the next step is to build a lightweight Python server to handle incoming HTTP POST requests to the Heroku URL.&lt;/p&gt;
&lt;h3 id=&quot;A-Note-on-the-Bot-ID&quot;&gt;&lt;a href=&quot;#A-Note-on-the-Bot-ID&quot; class=&quot;headerlink&quot; title=&quot;A Note on the Bot ID&quot;&gt;&lt;/a&gt;A Note on the Bot ID&lt;/h3&gt;&lt;p&gt;Since Heroku is git-based, it’s really easy to upload your bot code to GitHub to show off your project.  However, you have to be careful that you don’t leak your bot ID key to the public, as anyone who has this ID can impersonate your bot and send messages on its behalf.  (This is a big problem, as explicit content or phishing messages could be sent from your bot with no (easy) way of tracing the source.)  Fortunately, there’s a really easy way to circumvent this using environment variables.&lt;/p&gt;
&lt;p&gt;Instead of hardcoding the bot ID into your Python code, you can create a “config variable” in Heroku.  (“Config variables” is just Heroku’s name for environment variables; they work exactly like typical environment variables in bash or the Windows command line.)  Create a new environment variable through the Heroku CLI as follows:&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ heroku &lt;span class=&quot;built_in&quot;&gt;config&lt;/span&gt;:set GROUPME_BOT_ID=[your &lt;span class=&quot;keyword&quot;&gt;bot &lt;/span&gt;id]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ heroku &lt;span class=&quot;built_in&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# should display all current configuration variables&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now, whenever you need to access your secret bot ID, you can just reference the &lt;code&gt;GROUPME_BOT_ID&lt;/code&gt; environment variable (for instance, through Python’s &lt;code&gt;os.getenv(&amp;#39;GROUPME_BOT_ID&amp;#39;)&lt;/code&gt;) and the secret is not leaked when you upload your code to GitHub.&lt;/p&gt;
&lt;h3 id=&quot;Bot-Code&quot;&gt;&lt;a href=&quot;#Bot-Code&quot; class=&quot;headerlink&quot; title=&quot;Bot Code&quot;&gt;&lt;/a&gt;Bot Code&lt;/h3&gt;&lt;p&gt;Create a new file called &lt;code&gt;app.py&lt;/code&gt;.  This will contain the some functions to handle any post request to the root URL.  It should start with some basic boilerplate for using Flask (some standard includes and setting the &lt;code&gt;app&lt;/code&gt; variable to be a new instance of a Flask object):&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;string&quot;&gt; os&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;string&quot;&gt; json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from urllib.parse &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;string&quot;&gt; urlencode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from urllib.request &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;string&quot;&gt; Request, urlopen&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from flask &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;string&quot;&gt; Flask, request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app = Flask(__name__)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;After this, create a function that will be called whenever the Heroku URL receives a POST request as in the snippet below.  This uses the “@app.route” decorator to specify it is for the &lt;code&gt;&amp;#39;/&amp;#39;&lt;/code&gt; URL and responds to &lt;code&gt;POST&lt;/code&gt; requests.  For this demo, the bot will simply echo back everything said by other people in chat.  The basic idea is to use the &lt;code&gt;request.get_json()&lt;/code&gt; method to get the JSON form of the reply, create a message, and send that back to GroupMe.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@app.route(&#39;/&#39;, methods=[&#39;POST&#39;])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;webhook&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data = request.get_json()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# We don&#39;t want to reply to ourselves!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;] != &lt;span class=&quot;string&quot;&gt;&#39;apnorton-test-bot&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    msg = &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&amp;#125;, you sent &quot;&amp;#123;&amp;#125;&quot;.&#39;&lt;/span&gt;.format(data[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;], data[&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    send_message(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;ok&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note that we check to make sure the name isn’t the name of our bot.  This is important for any echoing bot–otherwise, it will get stuck in an infinite loop of replies to itself.  (Yes, I did learn this the hard way.)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; dictionary has the following format (blatantly stolen from the &lt;a href=&quot;https://dev.groupme.com/tutorials/bots&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GroupMe bot tutorial&lt;/a&gt;):&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;attachments&quot;&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;avatar_url&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;http://i.groupme.com/123456789&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;created_at&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1302623328&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;group_id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1234567890&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1234567890&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;John&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;sender_id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;12345&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;sender_type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;source_guid&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;GUID&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;system&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;text&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Hello world ☃☃&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;user_id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1234567890&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;attachments&lt;/code&gt; key would contain special features of the message, including mentions and pictures. Unfortunately, I have yet to find a way to allow users to @-ping my bot (though the bot can use the &lt;code&gt;attachments&lt;/code&gt; key to mention other users).  Your bot will likely only care about the &lt;code&gt;name&lt;/code&gt; (or &lt;code&gt;user_id&lt;/code&gt;) and &lt;code&gt;text&lt;/code&gt; fields of the message, and not much else.  That’s all we need for this “echo” bot.&lt;/p&gt;
&lt;p&gt;The last remaining thing is to define the &lt;code&gt;send_message&lt;/code&gt; function.  (From a software engineering perspective, we probably would want separate &lt;code&gt;parse_message&lt;/code&gt; and &lt;code&gt;send_message&lt;/code&gt; functions so the core bot code could be used on any platform. However, for the echobot, the parsing is essentially nonexistent, so I rolled that into the &lt;code&gt;webhook&lt;/code&gt; function above.)  The duties of this function are to package up the message and bot ID in JSON format and submit it as a POST request.  (Notice how &lt;code&gt;os.getenv&lt;/code&gt; is used to retreive the bot ID from the Heroku environment variables instead of hard-coding the bot ID.)&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;send_message&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(msg)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  url  = &lt;span class=&quot;string&quot;&gt;&#39;https://api.groupme.com/v3/bots/post&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#39;bot_id&#39;&lt;/span&gt; : os.getenv(&lt;span class=&quot;string&quot;&gt;&#39;GROUPME_BOT_ID&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;   : msg,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  request = Request(url, urlencode(data).encode())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  json = urlopen(request).read().decode()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To deploy, simply save and commit your files, then run &lt;code&gt;$ git push heroku master&lt;/code&gt; to start your app running on Heroku.  The bot should now echo whatever is said in its group.  I recommend creating a “test” group developing your bot; otherwise, the other members of the bot’s group will probably get annoyed during development.&lt;/p&gt;
&lt;h2 id=&quot;More-resources-NLP-and-Code&quot;&gt;&lt;a href=&quot;#More-resources-NLP-and-Code&quot; class=&quot;headerlink&quot; title=&quot;More resources: NLP and Code&quot;&gt;&lt;/a&gt;More resources: NLP and Code&lt;/h2&gt;&lt;p&gt;This blog post focuses primarily on the “implementation” details of deploying a chatbot, and doesn’t deal with none of the natural language processing, personality creation, or content generation.  There’s a lot of good content out there; I found &lt;a href=&quot;https://apps.worldwritable.com/tutorials/chatbot/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this tutorial&lt;/a&gt; on creating a chatbot with &lt;code&gt;Textblob&lt;/code&gt; (a wrapper for the popular &lt;code&gt;nltk&lt;/code&gt; Python library) to be helpful in my own bot explorations.  For my TA chatbot, I dealt only with search-string matches and used a fair bit of hardcoding, but natural language processing is the next step in my bot’s development.&lt;/p&gt;
&lt;p&gt;As another resource, I’ve created a GitHub repository with the relevant skeleton code used in this blog at &lt;a href=&quot;https://github.com/apnorton/apnorton-demo-bot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/apnorton/apnorton-demo-bot&lt;/a&gt;.  The original chatbot I wrote for the CS 2150 TAs is also on GitHub &lt;a href=&quot;https://github.com/apnorton/bloombot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;For the past couple years, I have worked as a teaching assistant for UVa’s CS 2150 (Program and Data Representation) course.  We recently started a &lt;a href=&quot;https://groupme.com/&quot;&gt;GroupMe&lt;/a&gt; chat for the course staff, and I thought it would be fun to create a chatbot to help remind all the TAs to submit timesheets, keep track of when people are holding office hours, and remember when/where TA meetings are being held.  Setting up a basic chatbot is a lot simpler than it sounds and is really fun–I wrote my bot from scratch using Python in just one day.&lt;/p&gt;
&lt;img src=&quot;/blog/2017/02/28/How-I-wrote-a-Groupme-Chatbot-in-24-hours/screenshot.png&quot; alt=&quot;The 2150 chatbot&quot; title=&quot;The 2150 chatbot&quot;&gt;
&lt;h2 id=&quot;GroupMe-Bot-Overview&quot;&gt;&lt;a href=&quot;#GroupMe-Bot-Overview&quot; class=&quot;headerlink&quot; title=&quot;GroupMe Bot Overview&quot;&gt;&lt;/a&gt;GroupMe Bot Overview&lt;/h2&gt;&lt;p&gt;GroupMe has a very &lt;a href=&quot;https://dev.groupme.com/tutorials/bots&quot;&gt;brief tutorial&lt;/a&gt; explaining how their API may be used for bots.  The easiest way to create a bot is through their &lt;a href=&quot;https://dev.groupme.com/bots/new&quot;&gt;web form&lt;/a&gt;, which prompts you for the bot’s name, callback URL (technically optional, but you want it), avatar URL (optional), and the name of the group where the bot will live.  Once you’ve done this, you will be given a unique bot ID token.  Anyone with this token can pretend to be your bot, so keep it safe.  (Security is somewhat laughable here: your bot asserts its ID and the server believes it with no “login” procedure.)  We’ll talk more about the callback URL in a moment; for now, just leave it blank.&lt;/p&gt;
&lt;p&gt;Once you’ve done these steps, you have created a bot–as far as GroupMe is concerned.  If you send a specifically formatted JSON mssage, the newly created bot will post in your group.  However, if left at this point, your “bot” is little more than a proxy for human-written messages submitted with &lt;code&gt;curl&lt;/code&gt;.  Your bot needs some way of reading messages sent to the group, formulating a response, and only then sending messages to the GroupMe servers.  &lt;/p&gt;
    
    </summary>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/categories/computer-science/"/>
    
      <category term="projects" scheme="http://www.apnorton.com/blog/categories/computer-science/projects/"/>
    
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/tags/computer-science/"/>
    
      <category term="chatbots" scheme="http://www.apnorton.com/blog/tags/chatbots/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow with the Surface Book</title>
    <link href="http://www.apnorton.com/blog/2017/01/04/Machine-Learning-with-the-Surface-Book/"/>
    <id>http://www.apnorton.com/blog/2017/01/04/Machine-Learning-with-the-Surface-Book/</id>
    <published>2017-01-04T20:32:45.000Z</published>
    <updated>2017-01-04T20:34:28.087Z</updated>
    
    <content type="html">&lt;p&gt;While interning at Microsoft over the summer, I received a first-generation Surface Book with an i5-6300U CPU (2.4 GHz dual core with up to 3.0 GHz), 8GB RAM, and a “GeForce GPU” (officially unnamed, but believed to be equivalent to a GT 940).  This is a huge step up from my older laptop, so I wanted to set it up for my ML work.  In this post, I’ll outline how I set it up with TensorFlow and GPU acceleration.&lt;/p&gt;
&lt;h2 id=&quot;CUDA-cuDNN&quot;&gt;&lt;a href=&quot;#CUDA-cuDNN&quot; class=&quot;headerlink&quot; title=&quot;CUDA + cuDNN&quot;&gt;&lt;/a&gt;CUDA + cuDNN&lt;/h2&gt;&lt;p&gt;If you want to use GPU acceleration, the typical way to do so is with NVIDIA’s CUDA API.  CUDA 8.0 is compatible with the Surface Book and is (as of this writing) the most up-to-date version of CUDA.  Download it &lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;from the NVIDIA website&lt;/a&gt; and run their installer.&lt;/p&gt;
&lt;p&gt;For work with deep learning, you’ll also want to install cuDNN.  To install, just &lt;a href=&quot;https://developer.nvidia.com/cudnn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;download&lt;/a&gt; the library from NVIDIA’s website and unzip it in a convenient place (I chose &lt;code&gt;C:\cudnn&lt;/code&gt;).  The only “installation” you need to do is to add &lt;code&gt;C:\cudnn\bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h2&gt;&lt;p&gt;GPU acceleration is where you’re going to get the best performance improvements when running TensorFlow.  However, we might as well set up Python in a way that will run as fast as we can.  &lt;/p&gt;
&lt;p&gt;I installed the &lt;a href=&quot;https://software.intel.com/intel-distribution-for-python&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Intel Distribution for Python&lt;/em&gt;&lt;/a&gt;.  This is a clone of Python 3.5, but compiled with optimizations for Intel CPUs and packaged with optimized versions of common libraries like &lt;code&gt;sklearn&lt;/code&gt;, &lt;code&gt;pandas&lt;/code&gt;, &lt;code&gt;numpy&lt;/code&gt;, and more.  It’s a free download from Intel, but it is officially still in Beta.  Thus far, I haven’t run into any problems using it with TensorFlow (but will update this post if I do).&lt;/p&gt;
&lt;p&gt;To install Intel Python, just download and run the installer; I installed this to &lt;code&gt;C:\IntelPython35&lt;/code&gt;.  If you install it in this location, add &lt;code&gt;C:\IntelPython35\&lt;/code&gt; and &lt;code&gt;C:\IntelPython35\Scripts&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; environment variable.  (Adding &lt;code&gt;\Scripts&lt;/code&gt; to your path allows you to use &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;jupyter&lt;/code&gt; directly from the commandline.)&lt;/p&gt;
&lt;p&gt;If you decide to use a different installation of Python, make sure you’re installing Python 3.5 and not the recent release of Python 3.6; as of this writing, installing TensorFlow on Windows with Python 3.6 and above is &lt;a href=&quot;https://github.com/tensorflow/tensorflow/issues/6533&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;not supported&lt;/a&gt;. &lt;/p&gt;
&lt;h2 id=&quot;TensorFlow&quot;&gt;&lt;a href=&quot;#TensorFlow&quot; class=&quot;headerlink&quot; title=&quot;TensorFlow&quot;&gt;&lt;/a&gt;TensorFlow&lt;/h2&gt;&lt;p&gt;My understanding is that compiling TensorFlow from source using Intel’s &lt;code&gt;icc&lt;/code&gt; and BLAS/LAPACK libraries will give you the best performance, but I  don’t have a permanent license to these, and so just installed with &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The version of &lt;code&gt;pip&lt;/code&gt; included with Intel Python is quite old, so the first step here is to upgrade it using &lt;code&gt;python -m pip install --upgrade pip&lt;/code&gt;.  Following this, we need to download the TensorFlow wheel from Google.  The up-to-date link can be found &lt;a href=&quot;https://www.tensorflow.org/get_started/os_setup#pip_installation_on_windows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;, but the current link is for &lt;a href=&quot;https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-0.12.1-cp35-cp35m-win_amd64.whl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;v0.12.1 with GPU support&lt;/a&gt;.  (I found that downloading the wheel has better success than running &lt;code&gt;pip&lt;/code&gt; directly on the URL.)&lt;/p&gt;
&lt;p&gt;Finally, execute &lt;code&gt;pip install --upgrade [TF-downloaded-file]&lt;/code&gt; to install TensorFlow.  This should finish somewhat quickly, and then you are done!&lt;/p&gt;
&lt;p&gt;When I first installed TensorFlow, I had some issues with an existing &lt;code&gt;setuptools&lt;/code&gt; installation and was getting an error similar to:&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Installing collected packages: six, setuptools, protobuf, numpy, tensorflow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Found existing installation: setuptools 19.1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;Cannot remove entries from nonexistent file C:\IntelPython35\Lib\site-packages\easy-install.pth&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This was &lt;a href=&quot;https://github.com/tensorflow/tensorflow/issues/622&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raised as an issue&lt;/a&gt; (&lt;a href=&quot;https://github.com/tensorflow/tensorflow/issues/135&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;and another issue&lt;/a&gt;) on the TensorFlow GitHub.  The solution that worked for me was to run the following:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; -I &lt;span class=&quot;comment&quot;&gt;--upgrade setuptools&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--upgrade [TF-downloaded-file]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Testing-the-Installation&quot;&gt;&lt;a href=&quot;#Testing-the-Installation&quot; class=&quot;headerlink&quot; title=&quot;Testing the Installation&quot;&gt;&lt;/a&gt;Testing the Installation&lt;/h2&gt;&lt;p&gt;Open up your terminal, and we’ll run a few commands: &lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; import tensorflow as tf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; a = tf.constant(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; b = tf.constant(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; sess = tf.Session()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt; print(sess.run(a+b))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;If it printed 42 at the end, then it works!  I recommend taking a look at the &lt;a href=&quot;https://www.tensorflow.org/get_started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TensorFlow MNIST tutorials&lt;/a&gt; after this, as they introduce TensorFlow’s capabilities quite nicely.&lt;/p&gt;
&lt;p&gt;At one point, I had a problem where any call to &lt;code&gt;tf.Session()&lt;/code&gt; or &lt;code&gt;tf.InteractiveSession()&lt;/code&gt; would cause Python to crash without displaying any error (Windows would display a “This process has stopped responding” dialog box and kill Python after a minute or so).  I never found out &lt;em&gt;why&lt;/em&gt; this happened, but restarting my computer resolved the issue and I haven’t experienced it again.&lt;/p&gt;
&lt;p&gt;If you’re curious whether your GPU utilized, look at the debug information that was printed after running &lt;code&gt;tf.Session()&lt;/code&gt;.  If it includes lines like the below (some unnecessary path names trimmed), then the GPU was used:&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Found device &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;properties&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;: GeForce GPU&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;major&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;minor&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;memoryClockRate (GHz) &lt;span class=&quot;number&quot;&gt;0.993&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pciBusID &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;01&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;00.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total &lt;span class=&quot;attribute&quot;&gt;memory&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1.00&lt;/span&gt;GiB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Credit where credit is due! When I was performing my install, I was greatly aided by &lt;a href=&quot;http://www.heatonresearch.com/2017/01/01/tensorflow-windows-gpu.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this blog post&lt;/a&gt; from Heaton Research.&lt;/em&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;While interning at Microsoft over the summer, I received a first-generation Surface Book with an i5-6300U CPU (2.4 GHz dual core with up to 3.0 GHz), 8GB RAM, and a “GeForce GPU” (officially unnamed, but believed to be equivalent to a GT 940).  This is a huge step up from my older laptop, so I wanted to set it up for my ML work.  In this post, I’ll outline how I set it up with TensorFlow and GPU acceleration.&lt;/p&gt;
&lt;h2 id=&quot;CUDA-cuDNN&quot;&gt;&lt;a href=&quot;#CUDA-cuDNN&quot; class=&quot;headerlink&quot; title=&quot;CUDA + cuDNN&quot;&gt;&lt;/a&gt;CUDA + cuDNN&lt;/h2&gt;&lt;p&gt;If you want to use GPU acceleration, the typical way to do so is with NVIDIA’s CUDA API.  CUDA 8.0 is compatible with the Surface Book and is (as of this writing) the most up-to-date version of CUDA.  Download it &lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot;&gt;from the NVIDIA website&lt;/a&gt; and run their installer.&lt;/p&gt;
&lt;p&gt;For work with deep learning, you’ll also want to install cuDNN.  To install, just &lt;a href=&quot;https://developer.nvidia.com/cudnn&quot;&gt;download&lt;/a&gt; the library from NVIDIA’s website and unzip it in a convenient place (I chose &lt;code&gt;C:\cudnn&lt;/code&gt;).  The only “installation” you need to do is to add &lt;code&gt;C:\cudnn\bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt; environment variable.&lt;/p&gt;
    
    </summary>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/categories/computer-science/"/>
    
      <category term="tools" scheme="http://www.apnorton.com/blog/categories/computer-science/tools/"/>
    
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/tags/computer-science/"/>
    
      <category term="data" scheme="http://www.apnorton.com/blog/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>Visualizing Multidimensional Data in Python</title>
    <link href="http://www.apnorton.com/blog/2016/12/19/Visualizing-Multidimensional-Data-in-Python/"/>
    <id>http://www.apnorton.com/blog/2016/12/19/Visualizing-Multidimensional-Data-in-Python/</id>
    <published>2016-12-20T01:51:55.000Z</published>
    <updated>2016-12-20T02:31:09.743Z</updated>
    
    <content type="html">&lt;p&gt;Nearly everyone is familiar with two-dimensional plots, and most college students in the hard sciences are familiar with three dimensional plots.  However, modern datasets are rarely two- or three-dimensional.  In machine learning, it is commonplace to have dozens if not hundreds of dimensions, and even human-generated datasets can have a dozen or so dimensions.  At the same time, visualization is an important first step in working with data.  In this blog entry, I’ll explore how we can use Python to work with n-dimensional data, where $n\geq 4$. &lt;/p&gt;
&lt;h2 id=&quot;Packages&quot;&gt;&lt;a href=&quot;#Packages&quot; class=&quot;headerlink&quot; title=&quot;Packages&quot;&gt;&lt;/a&gt;Packages&lt;/h2&gt;&lt;p&gt;I’m going to assume we have the &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;pandas&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt;, and &lt;code&gt;sklearn&lt;/code&gt; packages installed for Python.  In particular, the components I will use are as below:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sklearn.decomposition &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; PCA &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; sklearnPCA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sklearn.discriminant_analysis &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; LinearDiscriminantAnalysis &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; LDA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sklearn.datasets.samples_generator &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; make_blobs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pandas.tools.plotting &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; parallel_coordinates&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Plotting-2D-Data&quot;&gt;&lt;a href=&quot;#Plotting-2D-Data&quot; class=&quot;headerlink&quot; title=&quot;Plotting 2D Data&quot;&gt;&lt;/a&gt;Plotting 2D Data&lt;/h2&gt;&lt;p&gt;Before dealing with multidimensional data, let’s see how a scatter plot works with two-dimensional data in Python.  &lt;/p&gt;
&lt;p&gt;First, we’ll generate some random 2D data using &lt;code&gt;sklearn.samples_generator.make_blobs&lt;/code&gt;.  We’ll create three classes of points and plot each class in a different color.  After running the following code, we have datapoints in &lt;code&gt;X&lt;/code&gt;, while classifications are in &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X, y = make_blobs(n_samples=&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, centers=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, n_features=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, random_state=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To create a 2D scatter plot, we simply use the &lt;code&gt;scatter&lt;/code&gt; function from &lt;code&gt;matplotlib&lt;/code&gt;.  Since we want each class to be a separate color, we use the &lt;code&gt;c&lt;/code&gt; parameter to set the datapoint color according to the &lt;code&gt;y&lt;/code&gt; (class) vector. &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(X[:,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], X[:,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], c=y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/blog/2016/12/19/Visualizing-Multidimensional-Data-in-Python/output_7_0.png&quot; alt=&quot;2D Scatter Plot with Colors&quot; title=&quot;2D Scatter Plot with Colors&quot;&gt;
&lt;h2 id=&quot;n-dimensional-dataset-Wine&quot;&gt;&lt;a href=&quot;#n-dimensional-dataset-Wine&quot; class=&quot;headerlink&quot; title=&quot;n-dimensional dataset: Wine&quot;&gt;&lt;/a&gt;n-dimensional dataset: Wine&lt;/h2&gt;&lt;p&gt;In the rest of this post, we will be working with the &lt;a href=&quot;https://archive.ics.uci.edu/ml/datasets/Wine&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wine&lt;/a&gt; dataset from the UCI Machine Learning Repository.  I selected this dataset because it has three classes of points and a thirteen-dimensional feature set, yet is still fairly small.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&#39;https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cols =  [&lt;span class=&quot;string&quot;&gt;&#39;Class&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Alcohol&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;MalicAcid&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Ash&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;AlcalinityOfAsh&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Magnesium&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;TotalPhenols&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;string&quot;&gt;&#39;Flavanoids&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;NonflavanoidPhenols&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Proanthocyanins&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ColorIntensity&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;string&quot;&gt;&#39;Hue&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;OD280/OD315&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Proline&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data = pd.read_csv(url, names=cols)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y = data[&lt;span class=&quot;string&quot;&gt;&#39;Class&#39;&lt;/span&gt;]          &lt;span class=&quot;comment&quot;&gt;# Split off classifications&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X = data.ix[:, &lt;span class=&quot;string&quot;&gt;&#39;Alcohol&#39;&lt;/span&gt;:] &lt;span class=&quot;comment&quot;&gt;# Split off features&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Method-1-Two-dimensional-slices&quot;&gt;&lt;a href=&quot;#Method-1-Two-dimensional-slices&quot; class=&quot;headerlink&quot; title=&quot;Method 1: Two-dimensional slices&quot;&gt;&lt;/a&gt;Method 1: Two-dimensional slices&lt;/h2&gt;&lt;p&gt;A simple approach to visualizing multi-dimensional data is to select two (or three) dimensions and plot the data as seen in that plane.  For example, I could plot the &lt;em&gt;Flavanoids&lt;/em&gt; vs. &lt;em&gt;Nonflavanoid Phenols&lt;/em&gt; plane as a two-dimensional “slice” of the original dataset:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# three different scatter series so the class labels in the legend are distinct&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(X[y==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;Flavanoids&#39;&lt;/span&gt;], X[y==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;NonflavanoidPhenols&#39;&lt;/span&gt;], label=&lt;span class=&quot;string&quot;&gt;&#39;Class 1&#39;&lt;/span&gt;, c=&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(X[y==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;Flavanoids&#39;&lt;/span&gt;], X[y==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;NonflavanoidPhenols&#39;&lt;/span&gt;], label=&lt;span class=&quot;string&quot;&gt;&#39;Class 2&#39;&lt;/span&gt;, c=&lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(X[y==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;Flavanoids&#39;&lt;/span&gt;], X[y==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;NonflavanoidPhenols&#39;&lt;/span&gt;], label=&lt;span class=&quot;string&quot;&gt;&#39;Class 3&#39;&lt;/span&gt;, c=&lt;span class=&quot;string&quot;&gt;&#39;lightgreen&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Prettify the graph&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.legend()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.xlabel(&lt;span class=&quot;string&quot;&gt;&#39;Flavanoids&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.ylabel(&lt;span class=&quot;string&quot;&gt;&#39;NonflavanoidPhenols&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# display&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/blog/2016/12/19/Visualizing-Multidimensional-Data-in-Python/output_11_0.png&quot; alt=&quot;Cross-Section of Data scatter plot&quot; title=&quot;Cross-Section of Data scatter plot&quot;&gt;
&lt;p&gt;The downside of this approach is that there are $\binom{n}{2} = \frac{n(n-1)}{2}$ such plots for $n$-dimensional an dataset, so viewing the entire dataset this way can be difficult.  While this does provide an “exact” view of the data and can be a great way of emphasizing certain relationships, there are other techniques we can use.  A related technique is to display a &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/version/0.18.1/visualization.html#scatter-matrix-plot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;scatter plot matrix&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Feature-Scaling&quot;&gt;&lt;a href=&quot;#Feature-Scaling&quot; class=&quot;headerlink&quot; title=&quot;Feature Scaling&quot;&gt;&lt;/a&gt;Feature Scaling&lt;/h2&gt;&lt;p&gt;Before we go further, we should apply feature scaling to our dataset.  In this example, I will simply rescale the data to a $[0,1]$ range, but it is also common to &lt;em&gt;standardize&lt;/em&gt; the data to have a zero mean and unit standard deviation.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X_norm = (X - X.min())/(X.max() - X.min())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Method-2-PCA-Plotting&quot;&gt;&lt;a href=&quot;#Method-2-PCA-Plotting&quot; class=&quot;headerlink&quot; title=&quot;Method 2: PCA Plotting&quot;&gt;&lt;/a&gt;Method 2: PCA Plotting&lt;/h2&gt;&lt;p&gt;Principle Component Analysis (PCA) is a method of dimensionality reduction.  It has applications far beyond visualization, but it can also be applied here.  It uses eigenvalues and eigenvectors to find new axes on which the data is most spread out.  From these new axes, we can choose those with the most extreme spreading and project onto this plane.  (This is an extremely hand-wavy explanation; I recommend reading more formal explanations of this.)&lt;/p&gt;
&lt;p&gt;In Python, we can use PCA by first fitting an &lt;code&gt;sklearn&lt;/code&gt; PCA object to the normalized dataset, then looking at the transformed matrix.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pca = sklearnPCA(n_components=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#2-dimensional PCA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;transformed = pd.DataFrame(pca.fit_transform(X_norm))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The return value &lt;code&gt;transformed&lt;/code&gt; is a &lt;code&gt;samples&lt;/code&gt;-by-&lt;code&gt;n_components&lt;/code&gt; matrix with the new axes, which we may now plot in the usual way.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(transformed[y==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], transformed[y==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], label=&lt;span class=&quot;string&quot;&gt;&#39;Class 1&#39;&lt;/span&gt;, c=&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(transformed[y==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], transformed[y==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], label=&lt;span class=&quot;string&quot;&gt;&#39;Class 2&#39;&lt;/span&gt;, c=&lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(transformed[y==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], transformed[y==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], label=&lt;span class=&quot;string&quot;&gt;&#39;Class 3&#39;&lt;/span&gt;, c=&lt;span class=&quot;string&quot;&gt;&#39;lightgreen&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.legend()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/blog/2016/12/19/Visualizing-Multidimensional-Data-in-Python/output_18_0.png&quot; alt=&quot;PCA plot of Wine dataset&quot; title=&quot;PCA plot of Wine dataset&quot;&gt;
&lt;p&gt;A downside of PCA is that the axes no longer have meaning.  Rather, they are just a projection that best “spreads” the data.  However, it does show that the data naturally forms clusters in some way.&lt;/p&gt;
&lt;h2 id=&quot;Method-3-Linear-Discriminant-Analysis&quot;&gt;&lt;a href=&quot;#Method-3-Linear-Discriminant-Analysis&quot; class=&quot;headerlink&quot; title=&quot;Method 3: Linear Discriminant Analysis&quot;&gt;&lt;/a&gt;Method 3: Linear Discriminant Analysis&lt;/h2&gt;&lt;p&gt;A similar approach to projecting to lower dimensions is Linear Discriminant Analysis (LDA).  This is similar to PCA, but (at an intuitive level) attempts to separate the classes rather than just spread the entire dataset.&lt;/p&gt;
&lt;p&gt;The code for this is similar to that for PCA:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lda = LDA(n_components=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#2-dimensional LDA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lda_transformed = pd.DataFrame(lda.fit_transform(X_norm, y))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Plot all three series&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(lda_transformed[y==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], lda_transformed[y==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], label=&lt;span class=&quot;string&quot;&gt;&#39;Class 1&#39;&lt;/span&gt;, c=&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(lda_transformed[y==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], lda_transformed[y==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], label=&lt;span class=&quot;string&quot;&gt;&#39;Class 2&#39;&lt;/span&gt;, c=&lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.scatter(lda_transformed[y==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], lda_transformed[y==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], label=&lt;span class=&quot;string&quot;&gt;&#39;Class 3&#39;&lt;/span&gt;, c=&lt;span class=&quot;string&quot;&gt;&#39;lightgreen&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Display legend and show plot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.legend(loc=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/blog/2016/12/19/Visualizing-Multidimensional-Data-in-Python/output_21_0.png&quot; alt=&quot;LDA plot of Wine dataset&quot; title=&quot;LDA plot of Wine dataset&quot;&gt;
&lt;h2 id=&quot;Method-4-Parallel-Coordinates&quot;&gt;&lt;a href=&quot;#Method-4-Parallel-Coordinates&quot; class=&quot;headerlink&quot; title=&quot;Method 4: Parallel Coordinates&quot;&gt;&lt;/a&gt;Method 4: Parallel Coordinates&lt;/h2&gt;&lt;p&gt;The final visualization technique I’m going to discuss is quite different than the others.  Instead of projecting the data into a two-dimensional plane and plotting the projections, the Parallel Coordinates plot (imported from &lt;code&gt;pandas&lt;/code&gt; instead of only &lt;code&gt;matplotlib&lt;/code&gt;) displays a vertical axis for each feature you wish to plot.  Each sample is then plotted as a color-coded line passing through the appropriate coordinate on each feature.  While this doesn’t always show how the data can be separated into classes, it does reveal trends within a particular class.  (For instance, in this example, we can see that &lt;em&gt;Class 3&lt;/em&gt; tends to have a very low OD280/OD315.)&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Select features to include in the plot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plot_feat = [&lt;span class=&quot;string&quot;&gt;&#39;MalicAcid&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Ash&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;OD280/OD315&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Magnesium&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;TotalPhenols&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Concat classes with the normalized data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data_norm = pd.concat([X_norm[plot_feat], y], axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Perform parallel coordinate plot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;parallel_coordinates(data_norm, &lt;span class=&quot;string&quot;&gt;&#39;Class&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/blog/2016/12/19/Visualizing-Multidimensional-Data-in-Python/output_23_0.png&quot; alt=&quot;Parallel Coordinates Plot&quot; title=&quot;Parallel Coordinates Plot&quot;&gt;
&lt;h2 id=&quot;Which-do-I-use&quot;&gt;&lt;a href=&quot;#Which-do-I-use&quot; class=&quot;headerlink&quot; title=&quot;Which do I use?&quot;&gt;&lt;/a&gt;Which do I use?&lt;/h2&gt;&lt;p&gt;As with much of data science, the method you use here is dependent on your particular dataset and what information you are trying to extract from it.  The PCA and LDA plots are useful for finding obvious cluster boundaries in the data, while a scatter plot matrix or parallel coordinate plot will show specific behavior of particular features in your dataset.&lt;/p&gt;
&lt;p&gt;I drafted this in a Jupyter notebook; if you want a copy of the notebook or have concerns about my post for some reason, you can send me an email at apn4za on the virginia.edu domain.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Nearly everyone is familiar with two-dimensional plots, and most college students in the hard sciences are familiar with three dimensional plots.  However, modern datasets are rarely two- or three-dimensional.  In machine learning, it is commonplace to have dozens if not hundreds of dimensions, and even human-generated datasets can have a dozen or so dimensions.  At the same time, visualization is an important first step in working with data.  In this blog entry, I’ll explore how we can use Python to work with n-dimensional data, where $n\geq 4$. &lt;/p&gt;
&lt;h2 id=&quot;Packages&quot;&gt;&lt;a href=&quot;#Packages&quot; class=&quot;headerlink&quot; title=&quot;Packages&quot;&gt;&lt;/a&gt;Packages&lt;/h2&gt;&lt;p&gt;I’m going to assume we have the &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;pandas&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt;, and &lt;code&gt;sklearn&lt;/code&gt; packages installed for Python.  In particular, the components I will use are as below:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sklearn.decomposition &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; PCA &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; sklearnPCA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sklearn.discriminant_analysis &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; LinearDiscriminantAnalysis &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; LDA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sklearn.datasets.samples_generator &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; make_blobs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pandas.tools.plotting &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; parallel_coordinates&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Plotting-2D-Data&quot;&gt;&lt;a href=&quot;#Plotting-2D-Data&quot; class=&quot;headerlink&quot; title=&quot;Plotting 2D Data&quot;&gt;&lt;/a&gt;Plotting 2D Data&lt;/h2&gt;&lt;p&gt;Before dealing with multidimensional data, let’s see how a scatter plot works with two-dimensional data in Python.  &lt;/p&gt;
&lt;p&gt;First, we’ll generate some random 2D data using &lt;code&gt;sklearn.samples_generator.make_blobs&lt;/code&gt;.  We’ll create three classes of points and plot each class in a different color.  After running the following code, we have datapoints in &lt;code&gt;X&lt;/code&gt;, while classifications are in &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X, y = make_blobs(n_samples=&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, centers=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, n_features=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, random_state=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To create a 2D scatter plot, we simply use the &lt;code&gt;scatter&lt;/code&gt; function from &lt;code&gt;matplotlib&lt;/code&gt;.  Since we want each class to be a separate color, we use the &lt;code&gt;c&lt;/code&gt; parameter to set the datapoint color according to the &lt;code&gt;y&lt;/code&gt; (class) vector. &lt;/p&gt;
    
    </summary>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/categories/computer-science/"/>
    
      <category term="tools" scheme="http://www.apnorton.com/blog/categories/computer-science/tools/"/>
    
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/tags/computer-science/"/>
    
      <category term="data" scheme="http://www.apnorton.com/blog/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>Election 2016: Moving Forward</title>
    <link href="http://www.apnorton.com/blog/2016/11/09/Election-2016/"/>
    <id>http://www.apnorton.com/blog/2016/11/09/Election-2016/</id>
    <published>2016-11-09T08:15:08.000Z</published>
    <updated>2016-11-16T04:06:10.061Z</updated>
    
    <content type="html">&lt;p&gt;&lt;em&gt;(Warning: political post ahead)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like many of my fellow Americans, I stayed up late tonight to watch the polling results for the 2016 General Election.  As of my writing this, it appears that Donald Trump will win by a slight margin.  The New York Times is predicting that the popular vote will go to Hillary Clinton, while Politico and the Wall Street Journal are showing the &lt;em&gt;current&lt;/em&gt; popular vote is Trump’s by about 1 million.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Also like most of my fellow Americans, I turned to social media (in my case, these are Facebook, Twitter, and Reddit) to find how my friends are taking the results.  About half of my friends are exulting in the victory of their candidate, while about half of my friends are dismayed at what they see to be the impending doom of the next four years.  As someone who hated both candidates with a vengeance, I’m watching the fireworks from a somewhat distant perspective.  While I’m glad Clinton isn’t president, I’m not thrilled with the prospects of a Trump presidency.  (Had this election gone the other way, the prior sentence would have simply switched the placement of names.)&lt;/p&gt;
&lt;p&gt;What is most interesting to me is the repetitive nature of elections–I suppose I was too young to notice it before, but being cognizant of four elections in my lifetime has lead me to believe a two key things are invariant.  (I recognize I am quite young to be making such bold claims; it will be interesting to look back on this post in a few decades to see how my opinions have shifted.)  &lt;/p&gt;
&lt;p&gt;Firstly, every election is “too important” to vote for a third party.  The nature of a two-party system lends itself towards the selection of candidates with increasingly extreme views; waiting “until it’s safe” to vote for a third party means you will never vote for that third party.  This was an interesting year for the Libertarian party; while they didn’t reach their “5% popular vote” goal to gain federal funding, they certainly made strides in becoming a more socially acceptable choice for voters.&lt;/p&gt;
&lt;p&gt;Secondly, whoever loses an election believes that the country is doomed.  A lot of my fundamentalist friends were convinced that Obama beating McCain in the 2008 election would result in the death of religious freedom.  When he was re-elected in 2012, the number of people on my Facebook feed talking about leaving the country and the perils of the future was stunning.  There was talk of trying to get Texas to secede.  Also, they blamed the third party for stealing needed votes from Romney.   However, after this election, I am seeing my more liberal friends posting their fears that the United States will cease to exist as we know it.  Paul Krugman, a Nobel Prize-winning economist-turned political commentator, &lt;a href=&quot;http://www.nytimes.com/interactive/projects/cp/opinion/election-night-2016/the-unknown-country&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wrote&lt;/a&gt; in an op-ed for the New York Times: “I don’t know how we go forward from here.  Is America a failed state and society? It looks truly possible.” Twitter was rife with comparisons to Brexit.  I saw a friend of mine post about recommending California secede from the Union, and I’ve seen multiple posts about how the popular vote should correspond to the electoral college.  To add to the confusion, I’ve even seen some friends blame the Libertarian party for stealing votes from Clinton.  I can’t help but notice the parallels between Republicans who lost in 2012 and 2008.&lt;/p&gt;
&lt;p&gt;Whether you are a Republican, Democrat, or third-party member, please remember that &lt;em&gt;this too shall pass&lt;/em&gt;.  Excessive revelry in victory doesn’t serve a positive purpose and neither does assuming the worst about the next four years.  Don’t give up–whether you view this as a great leap forward or a frightening setback, there is much to be done to improve our country and we each have a role to play.  Let’s seek to understand and respect each other as we attempt to rebuild trust and cooperation after a very divisive race.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;(Warning: political post ahead)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like many of my fellow Americans, I stayed up late tonight to watch the polling results for the 2016 General Election.  As of my writing this, it appears that Donald Trump will win by a slight margin.  The New York Times is predicting that the popular vote will go to Hillary Clinton, while Politico and the Wall Street Journal are showing the &lt;em&gt;current&lt;/em&gt; popular vote is Trump’s by about 1 million.&lt;/p&gt;
    
    </summary>
    
      <category term="opinion" scheme="http://www.apnorton.com/blog/categories/opinion/"/>
    
    
      <category term="life" scheme="http://www.apnorton.com/blog/tags/life/"/>
    
      <category term="opinion" scheme="http://www.apnorton.com/blog/tags/opinion/"/>
    
  </entry>
  
  <entry>
    <title>New Feature: Commenting!</title>
    <link href="http://www.apnorton.com/blog/2016/10/28/Commenting/"/>
    <id>http://www.apnorton.com/blog/2016/10/28/Commenting/</id>
    <published>2016-10-28T04:32:31.000Z</published>
    <updated>2016-11-16T04:06:10.061Z</updated>
    
    <content type="html">&lt;p&gt;Thanks to a &lt;a href=&quot;http://www.codeblocq.com/2015/12/Add-Disqus-comments-in-Hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;helpful blog post&lt;/a&gt; by CodeBlocQ, I’ve now enabled Disqus-powered comments on the blog!  Let me know what you think about my posts, and I’ll keep an eye on discussions to respond to questions/comments/concerns!&lt;/p&gt;
&lt;p&gt;The second part of the Microsoft series should be out soon; I wanted to get comments working before I did so, but it took me a while to find the time to actually get it up and running.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Thanks to a &lt;a href=&quot;http://www.codeblocq.com/2015/12/Add-Disqus-comments-in-Hexo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;helpful blog post&lt;/a&gt; 
    
    </summary>
    
      <category term="meta" scheme="http://www.apnorton.com/blog/categories/meta/"/>
    
    
      <category term="meta" scheme="http://www.apnorton.com/blog/tags/meta/"/>
    
  </entry>
  
  <entry>
    <title>A Microsoft Summer, Part 1: Seattle Fun</title>
    <link href="http://www.apnorton.com/blog/2016/09/30/A-Summer-with-Microsoft/"/>
    <id>http://www.apnorton.com/blog/2016/09/30/A-Summer-with-Microsoft/</id>
    <published>2016-09-30T05:26:20.000Z</published>
    <updated>2016-11-16T04:06:09.994Z</updated>
    
    <content type="html">&lt;p&gt;As suggested by this post’s title, I spent this past summer as an intern with Microsoft in Redmond, Washington.  The experience was highly educational for me–as my first (and last!) “real” internship, I learned a lot about software development and the importance of corporate culture, as well as discovering a lot about myself.  Overall, the experience was a positive one, though, and I had an enormous amount of fun!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is the first of a three-part series on my time at Microsoft.  This post focuses on fun recreational activities for interns in the Seattle area.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Outdoors&quot;&gt;&lt;a href=&quot;#Outdoors&quot; class=&quot;headerlink&quot; title=&quot;Outdoors&quot;&gt;&lt;/a&gt;Outdoors&lt;/h2&gt;&lt;img src=&quot;/blog/2016/09/30/A-Summer-with-Microsoft/north_cascades.jpg&quot; alt=&quot;Hiking in the North Cascades&quot; title=&quot;Hiking in the North Cascades&quot;&gt;
&lt;p&gt;The Pacific Northwest is home to some of the most amazing views I’ve ever seen.  Seattle is conveniently located close to the beach, the mountains, Puget Sound, rainforests, and many hiking trails and campsites.  Exploring the outdoors also has the advantage of being very inexpensive, which is great if you’re saving your internship money for college expenses.  If you visit National Parks, consider the &lt;a href=&quot;https://www.nps.gov/elca/planyourvisit/passport-program.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;National Park Passport Program&lt;/a&gt;–if you’re going to once-in-a-lifetime parks, it’s a good idea to get your passbook stamped!&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;Olympic National Park&lt;/strong&gt; &lt;em&gt;(1+ days, $5 parking permit)&lt;/em&gt;: Olympic is a &lt;em&gt;gigantic&lt;/em&gt; national park just a few hours away from Seattle.  It has beaches, mountains, and rainforests–whatever you enjoy seeing in nature, you’ll probably find it here.  The Microsoft Internz mailing list organizes some hikes in this park.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;North Cascades National Park&lt;/strong&gt; &lt;em&gt;(1+ days, $5 parking permit)&lt;/em&gt;: Less-frequented and a bit further away than Olympic, the North Cascades is a bit less developed/road-accessible, but totally worth it.  I hiked the Maple Loop Trail one afternoon–it’s around 8 miles with ~2000ft of elevation gain–the view was amazing.  If you’re looking for a good trail to do in around 5 hours, I recommend that one.  There’s no cell reception anywhere in the park, so be sure to bring an actual map or print directions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kayaking the sound&lt;/strong&gt; &lt;em&gt;(2-3 hours, $18/hour)&lt;/em&gt;: Kayaking in the sound is an awesome way to spend a few hours on an afternoon.  Be sure to wear sunscreen!  &lt;a href=&quot;http://aguaverde.com/paddleclub/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Agua Verde&lt;/a&gt; is a popular place to rent kayaks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Camping&lt;/strong&gt; &lt;em&gt;(2+ days)&lt;/em&gt;: I didn’t bring my camping gear, but I sure wish I did!  Camping in national or state parks (especially the Cascades or Olympic) would be amazing.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Climbing&lt;/strong&gt; &lt;em&gt;(~\$60/mo or ~\$20/day)&lt;/em&gt;: Seattle is home to some awesome climbing gyms!  &lt;a href=&quot;https://www.stonegardens.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stone Gardens&lt;/a&gt; has locations in both Seattle and Redmond, and it had roped climbing and bouldering, so I joined that gym. A Stone Gardens membership costs around $60/month (bring your student ID!), but you can go for free on your first visit if a member brings you–reach out on Facebook or Slack for other interns to invite you.  Going on outdoors climbs and/or mountaineering events was something some of my friends did, which they seemed to really enjoy.&lt;/p&gt;
&lt;h2 id=&quot;Museums-Landmarks-etc&quot;&gt;&lt;a href=&quot;#Museums-Landmarks-etc&quot; class=&quot;headerlink&quot; title=&quot;Museums, Landmarks, etc&quot;&gt;&lt;/a&gt;Museums, Landmarks, etc&lt;/h2&gt;&lt;img src=&quot;/blog/2016/09/30/A-Summer-with-Microsoft/museum_of_flight.jpg&quot; alt=&quot;Boeing Museum of Flight&quot; title=&quot;Boeing Museum of Flight&quot;&gt;
&lt;p&gt;There’s a lot to do in Seattle, and one of your best tools for experiencing as much as you can while still being under budget is the Microsoft Prime Card.  With discounts on everything from haircuts and food to zoos and museums, it’s a really awesome perk for interns who want to see everything.  I’ve listed the Prime Card cost and the “normal” cost for as many of the activities below as I could find.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boeing Museum of Flight&lt;/strong&gt; &lt;em&gt;(3hrs, $5 with Prime Card, &lt;a href=&quot;http://www.museumofflight.org/Plan-Your-Visit/Hours-and-Admission&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;$21 without&lt;/a&gt;)&lt;/em&gt;: The Museum of Flight is simply amazing.  I’ve been to the Smithsonian Air and Space Museum in DC, the Udvar-Hazy Center in Dulles, and the National Museum of the USAF, but and this is certainly in their tier.  In fact, I’d contend some of the exhibit design far exceeds that of the Smithsonian, even though the collection seems to be smaller.  Some of my favorite parts were the one-of-a-kind M-21 Blackbird (instead of the more common SR 71), being able to walk through a Concorde jet, and seeing my third B-29 Superfortress.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ada’s Technical Books&lt;/strong&gt; &lt;em&gt;(1-2hrs, prices reasonable)&lt;/em&gt;: This is the dream bookstore for any techie.  I’ve &lt;a href=&quot;http://www.apnorton.com/blog/2016/08/07/Ada-s-Technical-Books/&quot;&gt;already written&lt;/a&gt; about it, so I’m not going to duplicate my summary here.  Suffice it to say that you can find books here on nearly any technical subject you’d ever be interested.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Woodland Park Zoo&lt;/strong&gt; &lt;em&gt;(3-4hrs, \$8.50 with Prime Card, \$19.95 without)&lt;/em&gt;: This zoo is well designed, and balances providing quality animal habitats while allowing guests to quickly move through exhibits and see many animals.  It’s certainly worth a weekend afternoon for a visit; I only wish the Komodo Dragon exhibit had been operational when I went.  My favorite section was the Northern Trail–they have really nice bear and wolf exhibits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Seattle Aquarium&lt;/strong&gt; &lt;em&gt;(2hrs, \$10.25 with Prime Card, \$24.95 without):&lt;/em&gt; The aquarium is really nice, but I’m afraid I was spoiled by growing up next to the National Aquarium in Baltimore.  For the $10.25 it costs with the Microsoft Prime Card, I’d certainly recommend going (it’s also right next to the Ferris Wheel and the National Historic Site Klondike Museum, so perhaps it could be part of a larger trip downtown), though. The octopus exhibit is really cool, and they do public feedings, so try to be there when one is scheduled.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Space Needle&lt;/strong&gt; &lt;em&gt;(2hrs, \$17 with Prime Card, \$22 without):&lt;/em&gt; Ok, sure, the Space Needle is expensive and really touristy, but you &lt;em&gt;must&lt;/em&gt; go up to the top if you haven’t already.  The view is spectacular, and there’s so much history tied up in this building about the World’s Fair (there are really nice exhibits on your way up).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EMP Museum&lt;/strong&gt; &lt;em&gt;(2-3hrs, $8 with Prime Card):&lt;/em&gt; While “EMP” stands for the “Experience Music Project,” there is a lot more here than just music.  Ever wonder where many of the costumes for &lt;em&gt;The Wizard of Oz&lt;/em&gt; ended up?   What about the costumes from &lt;em&gt;The Princess Bride&lt;/em&gt; or Susan’s horn from &lt;em&gt;The Lion, The Witch, and the Wardrobe&lt;/em&gt;?  Yep, they’re all here.  They even have a sci-fi exhibit with props from Doctor Who, Star Trek, 2001, and many other famous movies and TV series.  I highly recommend going.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Chihuly Glass Museum&lt;/strong&gt; &lt;em&gt;(1hr, \$17 with Prime Card, \$22 without):&lt;/em&gt; If you’re into glass art, this is a nice place.  Chihuly really has a talent for making spectacular works from simple materials, and it’s all lit up in an amazing way.  This, the EMP Museum, and the Space Needle are all within walking distance from each other, so the trio could make for a full day of fun.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pike Place Market &amp;amp; Starbucks&lt;/strong&gt; &lt;em&gt;(1-2hrs):&lt;/em&gt; The Pike Place Market is a pretty famous part of Seattle for many reasons, not the least of which being that the first Starbucks is here.  You &lt;em&gt;must&lt;/em&gt; eat the Salmon or Halibut sandwich at the Market Grill. It would be worth a trip from Redmond to Seattle in rush hour just to eat this delicious meal.&lt;/p&gt;
&lt;h2 id=&quot;Microsoft-Related&quot;&gt;&lt;a href=&quot;#Microsoft-Related&quot; class=&quot;headerlink&quot; title=&quot;Microsoft-Related&quot;&gt;&lt;/a&gt;Microsoft-Related&lt;/h2&gt;&lt;img src=&quot;/blog/2016/09/30/A-Summer-with-Microsoft/intern_signature_event.jpg&quot; alt=&quot;Ellie Goulding in Concert&lt;br /&gt;at the Microsoft Intern Signature Event&quot; title=&quot;Ellie Goulding in Concert&lt;br /&gt;at the Microsoft Intern Signature Event&quot;&gt;
&lt;p&gt;Microsoft itself hosts some pretty awesome events for interns.  I didn’t do as many as were offered (and some of the ones I missed sounded pretty cool, like NERF Battles and Amazon vs. Microsoft Paintball), but I’ve listed below ones I participated in and enjoyed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Microsoft Intern Puzzle Day&lt;/strong&gt;: Consistently reported by interns who participated as one of the best parts of the internship.  If you’re interested in puzzles, codes, and problem-solving (and, let’s face it–if you’re in CS, the answer is probably “yes”), this is the event for you!  Also, you can get a free t-shirt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hunger Games&lt;/strong&gt;: What could be more fun than running around Microsoft campus in the dark with NERF guns?  Not much! This event is a great way to meet new friends and unwind after a hard day’s work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assassin&lt;/strong&gt;: Can you track down and tag your target before your deadline expires?  This is the ultimate in workplace sneakery as, for approximately 3 weeks, interns will be hunting each other down and tagging each other with namebadges.  Kill or be killed–it’s a lot of fun either way. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Internz Hikes&lt;/strong&gt;: Sign up for the Internz mailing list, and go on at least one hike.  These range from simple hikes that anyone could do to 14 milers that might benefit from some preparation.  Like I’ve mentioned before, there’s a lot of great hiking in the area–don’t finish out the summer without at least trying one hike.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intern Signature Event&lt;/strong&gt;: This is the best event for interns that Microsoft hosts, hands down.  They typically rent out a large venue (past events have been held at the Boeing factory, Gasworks, and–most recently–the Space Needle and surrounding areas), host a private concert (e.g. Maroon 5, Ellie Goulding, etc), and give away a really nice gift to all their interns (this past year, we all got Surface Books).  Definitely go–it’s a blast and you’ll have a lot of fun.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;As suggested by this post’s title, I spent this past summer as an intern with Microsoft in Redmond, Washington.  The experience was highly educational for me–as my first (and last!) “real” internship, I learned a lot about software development and the importance of corporate culture, as well as discovering a lot about myself.  Overall, the experience was a positive one, though, and I had an enormous amount of fun!  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is the first of a three-part series on my time at Microsoft.  This post focuses on fun recreational activities for interns in the Seattle area.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Outdoors&quot;&gt;&lt;a href=&quot;#Outdoors&quot; class=&quot;headerlink&quot; title=&quot;Outdoors&quot;&gt;&lt;/a&gt;Outdoors&lt;/h2&gt;&lt;img src=&quot;/blog/2016/09/30/A-Summer-with-Microsoft/north_cascades.jpg&quot; alt=&quot;Hiking in the North Cascades&quot; title=&quot;Hiking in the North Cascades&quot;&gt;
&lt;p&gt;The Pacific Northwest is home to some of the most amazing views I’ve ever seen.  Seattle is conveniently located close to the beach, the mountains, Puget Sound, rainforests, and many hiking trails and campsites.  Exploring the outdoors also has the advantage of being very inexpensive, which is great if you’re saving your internship money for college expenses.  If you visit National Parks, consider the &lt;a href=&quot;https://www.nps.gov/elca/planyourvisit/passport-program.htm&quot;&gt;National Park Passport Program&lt;/a&gt;–if you’re going to once-in-a-lifetime parks, it’s a good idea to get your passbook stamped!&lt;/p&gt;
    
    </summary>
    
      <category term="fun" scheme="http://www.apnorton.com/blog/categories/fun/"/>
    
      <category term="seattle" scheme="http://www.apnorton.com/blog/categories/fun/seattle/"/>
    
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/tags/computer-science/"/>
    
      <category term="internship" scheme="http://www.apnorton.com/blog/tags/internship/"/>
    
      <category term="life" scheme="http://www.apnorton.com/blog/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Ada&#39;s Technical Books</title>
    <link href="http://www.apnorton.com/blog/2016/08/07/Ada-s-Technical-Books/"/>
    <id>http://www.apnorton.com/blog/2016/08/07/Ada-s-Technical-Books/</id>
    <published>2016-08-07T05:01:24.000Z</published>
    <updated>2016-11-16T04:06:10.097Z</updated>
    
    <content type="html">&lt;p&gt;This summer, I’ve been working as an intern for Microsoft on the Direct2D/DirectWrite team.  While I can’t really talk about what my work entails, I &lt;em&gt;can&lt;/em&gt; talk about some of the fun things I’ve done this summer in my free time and the non-work-related components of my internship.  I suppose most people wouldn’t start blogging about their internship by describing a bookstore, but I went to this place today and it was so incredible that I had to write about it.&lt;/p&gt;
&lt;p&gt;In Capitol Hill, there’s a small store by the name &lt;a href=&quot;http://www.seattletechnicalbooks.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Ada’s Technical Books&lt;/em&gt;&lt;/a&gt;. It’s in a house that’s been converted to a cafe and bookstore, and is quite possibly the most amazing bookstore I’ve ever seen.  As you walk in, you’re greeted by an small cafe counter to your left and an open area to your right with short bookcases and comfy chairs.  Toys, puzzles, and “Maker”-appropriate items like lockpicks and Raspberry Pis.  &lt;/p&gt;
&lt;img src=&quot;/blog/2016/08/07/Ada-s-Technical-Books/widgets.jpg&quot; alt=&quot;Who can resist a giant 555 timer?&quot; title=&quot;Who can resist a giant 555 timer?&quot;&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;As I explored the shelves, I found dozens of copies of Petzold’s &lt;em&gt;CODE&lt;/em&gt;, a strong science fiction section with nods to &lt;em&gt;The Princess Bride&lt;/em&gt; and &lt;em&gt;The Lord of the Rings&lt;/em&gt;, myriad &lt;strong&gt;Make:&lt;/strong&gt; books, &lt;a href=&quot;http://www.sparkfun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sparkfun&lt;/a&gt; kits, and many books I’ve only seen online catalogs.  Looking for a copy of &lt;a href=&quot;https://mitpress.mit.edu/books/introduction-algorithms&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CLRS&lt;/a&gt;? It’s there, along with many other famous textbooks.  &lt;a href=&quot;http://codebabies.com/product/html-for-babies&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;HTML for Babies&lt;/em&gt;&lt;/a&gt;? It’s in the kids section alongside books for helping your child learn to program and &lt;a href=&quot;http://www.snapcircuits.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Snap Circuits&lt;/a&gt; kits for teaching electronics.  Math books ranging from basic statistics and calculus all the way through advanced algebra and cryptanalysis are available, as are language-specific programming texts for just about almost every language I’ve heard of.&lt;/p&gt;
&lt;img src=&quot;/blog/2016/08/07/Ada-s-Technical-Books/reading_room.jpg&quot; alt=&quot;Wall-to-wall bookcases in the back reading room&quot; title=&quot;Wall-to-wall bookcases in the back reading room&quot;&gt;
&lt;p&gt;The back of the building has a “reading room” area with a chalkboard, large table, and a bar-like area for reading or coding.  On the 3 sides of the room not covered by the chalkboard, there are wall-to-wall bookcases containing books on dozens of languages and technologies.  &lt;/p&gt;
&lt;p&gt;If you’re in the Seattle area, especially if you’re interning or going to school in the area, I &lt;em&gt;highly&lt;/em&gt; recommend visiting this store.  Even if you don’t plan on purchasing anything, it’s a great opportunity to read a few pages of a book you might not be convinced is worth adding to you personal collection, but can’t read enough of a preview online to make that determination.  The fact that this store has sufficient customers to survive is a strong indicator of the impact Microsoft, Amazon, and Google have on the community–I wish there was a store like this where I live! &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This summer, I’ve been working as an intern for Microsoft on the Direct2D/DirectWrite team.  While I can’t really talk about what my work entails, I &lt;em&gt;can&lt;/em&gt; talk about some of the fun things I’ve done this summer in my free time and the non-work-related components of my internship.  I suppose most people wouldn’t start blogging about their internship by describing a bookstore, but I went to this place today and it was so incredible that I had to write about it.&lt;/p&gt;
&lt;p&gt;In Capitol Hill, there’s a small store by the name &lt;a href=&quot;http://www.seattletechnicalbooks.com/&quot;&gt;&lt;em&gt;Ada’s Technical Books&lt;/em&gt;&lt;/a&gt;. It’s in a house that’s been converted to a cafe and bookstore, and is quite possibly the most amazing bookstore I’ve ever seen.  As you walk in, you’re greeted by an small cafe counter to your left and an open area to your right with short bookcases and comfy chairs.  Toys, puzzles, and “Maker”-appropriate items like lockpicks and Raspberry Pis.  &lt;/p&gt;
&lt;img src=&quot;/blog/2016/08/07/Ada-s-Technical-Books/widgets.jpg&quot; alt=&quot;Who can resist a giant 555 timer?&quot; title=&quot;Who can resist a giant 555 timer?&quot;&gt;
    
    </summary>
    
      <category term="fun" scheme="http://www.apnorton.com/blog/categories/fun/"/>
    
      <category term="seattle" scheme="http://www.apnorton.com/blog/categories/fun/seattle/"/>
    
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/tags/computer-science/"/>
    
      <category term="internship" scheme="http://www.apnorton.com/blog/tags/internship/"/>
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
      <category term="books" scheme="http://www.apnorton.com/blog/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>Visualizing Graphs in Program Output</title>
    <link href="http://www.apnorton.com/blog/2016/03/08/Visualizing-Graphs-in-Program-Output/"/>
    <id>http://www.apnorton.com/blog/2016/03/08/Visualizing-Graphs-in-Program-Output/</id>
    <published>2016-03-08T22:11:35.000Z</published>
    <updated>2016-12-19T22:55:04.718Z</updated>
    
    <content type="html">&lt;p&gt;Many computer science problems utilize &lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_%28discrete_mathematics%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;graph&lt;/a&gt;-based data structures.  Their use can range from explicit inclusion in an algorithm-centric problem (like path-finding) to a more “behind-the-scenes” presence in Bayesian networks or descriptions of finite automata.  Unfortunately, visualizing large graphs can be difficult to do, especially for debugging.  Unlike lists or dictionaries, which can be represented clearly by plain text printing, depicting a graph tends to require more graphics overhead than is reasonable for most programmers to write simply for debugging purposes.  I’ve found that &lt;a href=&quot;http://graphviz.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Graphviz&lt;/a&gt;, a free graph visualization utility, can be quite useful in debugging graph-related programs.&lt;/p&gt;
&lt;h2 id=&quot;Installing-Graphviz&quot;&gt;&lt;a href=&quot;#Installing-Graphviz&quot; class=&quot;headerlink&quot; title=&quot;Installing Graphviz&quot;&gt;&lt;/a&gt;Installing Graphviz&lt;/h2&gt;&lt;p&gt;If you’re on a Debian-based Linux OS (e.g. Ubuntu), you can install Graphviz using &lt;code&gt;apt-get&lt;/code&gt;.  Just run &lt;code&gt;$ sudo apt-get install graphviz&lt;/code&gt; and you’ll have everything you need to complete the steps in this blog post.  Mac OS X users can use &lt;code&gt;brew&lt;/code&gt; equivalently.&lt;/p&gt;
&lt;p&gt;Windows users should install using a binary downloaded from the &lt;a href=&quot;http://graphviz.org/Download_windows.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Graphviz Windows page&lt;/a&gt;, but there might be some issues with setting the &lt;code&gt;PATH&lt;/code&gt; variable for running in the commandline.&lt;/p&gt;
&lt;h2 id=&quot;Making-a-basic-graph&quot;&gt;&lt;a href=&quot;#Making-a-basic-graph&quot; class=&quot;headerlink&quot; title=&quot;Making a basic graph&quot;&gt;&lt;/a&gt;Making a basic graph&lt;/h2&gt;&lt;p&gt;Once you’ve installed, the next thing you’ll want to do is create a basic graph to ensure the installation succeeded and to gain practice using Graphviz tools.  We do this by creating a &lt;code&gt;*.dot&lt;/code&gt; file that describes the graph we wish to display.  If you’re the type of person who likes to jump right in and experiment first before reading too much, or if you love formal language specification, the &lt;a href=&quot;http://www.graphviz.org/content/dot-language&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOT grammar&lt;/a&gt; is fairly readable and can give a quick introduction to creating DOT files.&lt;/p&gt;
&lt;p&gt;The below is a fairly representative DOT file to demonstrate some of the capabilities of Graphviz. Open your favorite text editor, copy/paste it in, and save it as &lt;code&gt;firstgraph.dot&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;firstgraph.dot&lt;/span&gt;&lt;a href=&quot;/blog/downloads/code/firstgraph.dot&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;digraph G {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Style information for nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A [style=&lt;span class=&quot;string&quot;&gt;&quot;filled&quot;&lt;/span&gt;, color=&lt;span class=&quot;string&quot;&gt;&quot;.05 .3 1.0&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Edge declarations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A -&amp;gt; {B, C};&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  D -&amp;gt; E [label=&lt;span class=&quot;string&quot;&gt;&quot;-1&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  E -&amp;gt; F [label=&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  F -&amp;gt; D [label=&lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This creates a directed graph (also called a &lt;em&gt;digraph&lt;/em&gt;) with six nodes and two connected components.  Some of the edges have labels, and one of the nodes is colored.  After you’ve copied (or downloaded) this file, open up a terminal to the directory with &lt;code&gt;firstgraph.dot&lt;/code&gt; in it and run &lt;code&gt;$ dot firstgraph.dot -Tpng -o firstgraph.png&lt;/code&gt;.  The resulting image file should look something like the below:&lt;/p&gt;
&lt;img src=&quot;/blog/2016/03/08/Visualizing-Graphs-in-Program-Output/firstgraph.jpg&quot; alt=&quot;The rendered `firstgraph.dot`&quot; title=&quot;The rendered `firstgraph.dot`&quot;&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;What did that terminal command do?  The &lt;code&gt;dot&lt;/code&gt; utility is used for producing an image corresponding to a &lt;em&gt;directed&lt;/em&gt; graph.  (If you want to create the diagram for an undirected graph, consider using &lt;code&gt;neato&lt;/code&gt;, or the other variants listed in &lt;code&gt;man dot&lt;/code&gt;.)  The &lt;code&gt;-Tpng&lt;/code&gt; flag will produce PNG output image output, and &lt;code&gt;-o firstgraph.png&lt;/code&gt; provides the output name.  If you don’t include the &lt;code&gt;-o&lt;/code&gt; flag, &lt;code&gt;dot&lt;/code&gt; will send its output straight to &lt;code&gt;stdout&lt;/code&gt;, which will produce a lot of garbage on the terminal.&lt;/p&gt;
&lt;h2 id=&quot;Creating-a-DOT-File-with-Python&quot;&gt;&lt;a href=&quot;#Creating-a-DOT-File-with-Python&quot; class=&quot;headerlink&quot; title=&quot;Creating a DOT File with Python&quot;&gt;&lt;/a&gt;Creating a DOT File with Python&lt;/h2&gt;&lt;p&gt;Most recently, I used Graphviz to depict the output of a graph coloring (approximation) algorithm within the register allocation routine for a compiler.  I wanted to make sure that each pair of adjacent nodes never shared the same color; looking at an adjacency list and checking the coloring by hand would have been difficult; however, by having my program create a DOT file describing the graph coloring, I can check the results at a glance:&lt;/p&gt;
&lt;img src=&quot;/blog/2016/03/08/Visualizing-Graphs-in-Program-Output/rig_small.jpg&quot; alt=&quot;Register interference graph (compiled with circo)&quot; title=&quot;Register interference graph (compiled with circo)&quot;&gt;
&lt;p&gt;This only required a few lines of Python code (see below), but produces very useful debugging information.  The below assumes we represent a graph as a dictionary that maps a vertex label to a set of adjacent vertex labels (essentially an adjacency list, but more pythonic), and writes the output to a file named &lt;code&gt;rig.dot&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;graphviz_dot_output.py&lt;/span&gt;&lt;a href=&quot;/blog/downloads/code/graphviz_dot_output.py&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;##&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# export_graph()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   Saves the graph to a dot file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   graph : a mapping of vertices to sets of vertices&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#           (adjacency map form)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;##&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;export_graph&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(graph, color=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Map integer colorings to graphviz colors&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cmap = {  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;brown&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;maroon2&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;orangered&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;crimson&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;lightseagreen&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;gold&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;cyan&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;plum&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;salmon&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;rig.dot&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.write(&lt;span class=&quot;string&quot;&gt;&#39;graph G {\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# For each vertex u in the graph&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; u &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; graph.keys():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# Add coloring information&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; color: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f.write(&lt;span class=&quot;string&quot;&gt;&#39;  &quot;%s&quot; [color=%s, style=filled];\n&#39;&lt;/span&gt; % (u, cmap[color[u]]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# For each neighbor v of u, add the edge&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; graph[u]: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u &amp;lt; v):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          f.write(&lt;span class=&quot;string&quot;&gt;&#39;  &quot;%s&quot; -- &quot;%s&quot;;\n&#39;&lt;/span&gt; % (u, v))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.write(&lt;span class=&quot;string&quot;&gt;&#39;}\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You’ll notice that the shape of the graph above is different than the shape of the first graph I showed.  Instead of using &lt;code&gt;dot&lt;/code&gt; to produce the output image for this graph, I instead used &lt;code&gt;circo&lt;/code&gt; (which attempts to draw the graph using a circular layout) and used a command line argument to ensure &lt;a href=&quot;http://stackoverflow.com/a/13420913/1110928&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodes wouldn’t overlap&lt;/a&gt;.  The resulting command was &lt;code&gt;$ circo -Goverlap=scale rig.dot -Tpng -o rig.png&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Graphs are an integral data structure for many computer science problems, yet are usually difficult to represent pictorially.  Graphviz can help reduce the amount of effort required to produce valuable debug output. In this post, I’ve provided a short example of the DOT format and some example code to output a graph in DOT form.  &lt;/p&gt;
&lt;p&gt;For users who want more detailed information on how to use Graphviz, I strongly recommend the &lt;a href=&quot;https://www.ocf.berkeley.edu/~eek/index.html/tiny_examples/thinktank/src/gv1.7c/doc/dotguide.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOT User’s Manual&lt;/a&gt; and reading the manpage (run &lt;code&gt;$ man dot&lt;/code&gt; in the terminal).&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Many computer science problems utilize &lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_%28discrete_mathematics%29&quot;&gt;graph&lt;/a&gt;-based data structures.  Their use can range from explicit inclusion in an algorithm-centric problem (like path-finding) to a more “behind-the-scenes” presence in Bayesian networks or descriptions of finite automata.  Unfortunately, visualizing large graphs can be difficult to do, especially for debugging.  Unlike lists or dictionaries, which can be represented clearly by plain text printing, depicting a graph tends to require more graphics overhead than is reasonable for most programmers to write simply for debugging purposes.  I’ve found that &lt;a href=&quot;http://graphviz.org/&quot;&gt;Graphviz&lt;/a&gt;, a free graph visualization utility, can be quite useful in debugging graph-related programs.&lt;/p&gt;
&lt;h2 id=&quot;Installing-Graphviz&quot;&gt;&lt;a href=&quot;#Installing-Graphviz&quot; class=&quot;headerlink&quot; title=&quot;Installing Graphviz&quot;&gt;&lt;/a&gt;Installing Graphviz&lt;/h2&gt;&lt;p&gt;If you’re on a Debian-based Linux OS (e.g. Ubuntu), you can install Graphviz using &lt;code&gt;apt-get&lt;/code&gt;.  Just run &lt;code&gt;$ sudo apt-get install graphviz&lt;/code&gt; and you’ll have everything you need to complete the steps in this blog post.  Mac OS X users can use &lt;code&gt;brew&lt;/code&gt; equivalently.&lt;/p&gt;
&lt;p&gt;Windows users should install using a binary downloaded from the &lt;a href=&quot;http://graphviz.org/Download_windows.php&quot;&gt;Graphviz Windows page&lt;/a&gt;, but there might be some issues with setting the &lt;code&gt;PATH&lt;/code&gt; variable for running in the commandline.&lt;/p&gt;
&lt;h2 id=&quot;Making-a-basic-graph&quot;&gt;&lt;a href=&quot;#Making-a-basic-graph&quot; class=&quot;headerlink&quot; title=&quot;Making a basic graph&quot;&gt;&lt;/a&gt;Making a basic graph&lt;/h2&gt;&lt;p&gt;Once you’ve installed, the next thing you’ll want to do is create a basic graph to ensure the installation succeeded and to gain practice using Graphviz tools.  We do this by creating a &lt;code&gt;*.dot&lt;/code&gt; file that describes the graph we wish to display.  If you’re the type of person who likes to jump right in and experiment first before reading too much, or if you love formal language specification, the &lt;a href=&quot;http://www.graphviz.org/content/dot-language&quot;&gt;DOT grammar&lt;/a&gt; is fairly readable and can give a quick introduction to creating DOT files.&lt;/p&gt;
&lt;p&gt;The below is a fairly representative DOT file to demonstrate some of the capabilities of Graphviz. Open your favorite text editor, copy/paste it in, and save it as &lt;code&gt;firstgraph.dot&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;firstgraph.dot&lt;/span&gt;&lt;a href=&quot;/blog/downloads/code/firstgraph.dot&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;digraph G {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Style information for nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A [style=&lt;span class=&quot;string&quot;&gt;&quot;filled&quot;&lt;/span&gt;, color=&lt;span class=&quot;string&quot;&gt;&quot;.05 .3 1.0&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Edge declarations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A -&amp;gt; {B, C};&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  D -&amp;gt; E [label=&lt;span class=&quot;string&quot;&gt;&quot;-1&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  E -&amp;gt; F [label=&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  F -&amp;gt; D [label=&lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This creates a directed graph (also called a &lt;em&gt;digraph&lt;/em&gt;) with six nodes and two connected components.  Some of the edges have labels, and one of the nodes is colored.  After you’ve copied (or downloaded) this file, open up a terminal to the directory with &lt;code&gt;firstgraph.dot&lt;/code&gt; in it and run &lt;code&gt;$ dot firstgraph.dot -Tpng -o firstgraph.png&lt;/code&gt;.  The resulting image file should look something like the below:&lt;/p&gt;
&lt;img src=&quot;/blog/2016/03/08/Visualizing-Graphs-in-Program-Output/firstgraph.jpg&quot; alt=&quot;The rendered `firstgraph.dot`&quot; title=&quot;The rendered `firstgraph.dot`&quot;&gt;
    
    </summary>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/categories/computer-science/"/>
    
      <category term="tools" scheme="http://www.apnorton.com/blog/categories/computer-science/tools/"/>
    
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/tags/computer-science/"/>
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Deranged Exams: An ICPC Problem</title>
    <link href="http://www.apnorton.com/blog/2015/10/15/Deranged-Exams-An-ICPC-Problem/"/>
    <id>http://www.apnorton.com/blog/2015/10/15/Deranged-Exams-An-ICPC-Problem/</id>
    <published>2015-10-16T00:24:00.000Z</published>
    <updated>2016-12-19T22:55:04.614Z</updated>
    
    <content type="html">&lt;p&gt;This past week, my ICPC team worked the 2013 Greater New York Regional problem packet.  One of my favorite problems in this set was Problem E: Deranged Exams.  The code required to solve this problem isn’t that complicated, but the math behind it is a little unusual.  In this post, I aim to explain the math and provide a solution to this problem.&lt;/p&gt;
&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description&quot;&gt;&lt;/a&gt;Problem Description&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;http://acmgnyr.org/year2013/e.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;full problem statement&lt;/a&gt; is archived online; in shortened form, we can consider the problem to be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a “matching” test of $n$ questions (each question maps to exactly one answer, and no two questions have the same answer), how many possible ways are there to answer at least the first $k$ questions wrong?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It turns out that there’s a really nice solution to this problem using a topic from combinatorics called “derangements.”  (Note that the problem title was a not-so-subtle hint towards the solution.)&lt;/p&gt;
&lt;h2 id=&quot;Derangements&quot;&gt;&lt;a href=&quot;#Derangements&quot; class=&quot;headerlink&quot; title=&quot;Derangements&quot;&gt;&lt;/a&gt;Derangements&lt;/h2&gt;&lt;p&gt;While the idea of a permutation should be familiar to most readers, the closely related topic of a derangement is rarely discussed in most undergraduate curriculum.  So, it is reasonable to start with a definition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A derangement is a permutation in which no element is in its original place.  The number of derangements on $n$ elements is denoted $D_n$; this is also called the subfactorial of $n$, denoted $!n$. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The sequence $\langle D_n\rangle$ is &lt;a href=&quot;https://oeis.org/A000166&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A000166&lt;/a&gt; in OEIS (a website with which, by the way, every competitive programmer should familiarize themselves).&lt;/p&gt;
&lt;p&gt;It turns out that there is both a recursive and an explicit formula for $D_n$:&lt;/p&gt;
&lt;span&gt;$$\begin{aligned}
D_n &amp;amp;= (-1)^n \sum_k\binom{n}{k} (-1)^k k! \\
&amp;amp;= n\cdot D_{n-1} + (-1)^n;\;(D_0=1)
\end{aligned}$$&lt;/span&gt;&lt;!-- Has MathJax --&gt;
&lt;p&gt;This is significant because we can use the explicit formulation for computing single values of derangements, or we can use dynamic programming to rapidly compute $D_n$ for relatively small $n$.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Problem-Approach&quot;&gt;&lt;a href=&quot;#Problem-Approach&quot; class=&quot;headerlink&quot; title=&quot;Problem Approach&quot;&gt;&lt;/a&gt;Problem Approach&lt;/h2&gt;&lt;p&gt;The key observation here is that, using the derangement formula, we may compute the number of ways to answer a given set of questions incorrectly, using only the answers corresponding to those questions.  Instead of focusing on the first $k$ questions, which we must answer incorrectly, let us look to the remaining $n-k$ questions.&lt;/p&gt;
&lt;p&gt;Consider the case when we answer $r$ questions correctly.  There are $\binom{n-k}{r}$ ways of choosing which $r$ questions we answer correctly (since the first $k$ must be wrong).&lt;/p&gt;
&lt;p&gt;The remaining $n-r$ questions must be answered incorrectly using only the answers to the same $n-r$ questions.  Using our knowledge of derangements, there are $!(n-r)$ ways to assign those incorrect answers.&lt;/p&gt;
&lt;p&gt;Finally, note that the number of correct answers, $r$ is bounded by $n-k$; summing over all possible values of $r$, we obtain:&lt;/p&gt;
&lt;p&gt;$$S(n, k) = \sum_{r=0}^{n-k} \binom{n-k}{r}\cdot !(n-r)$$&lt;/p&gt;
&lt;h2 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Code&quot; class=&quot;headerlink&quot; title=&quot;Code&quot;&gt;&lt;/a&gt;Code&lt;/h2&gt;&lt;p&gt;Equations are great, but implementation is required for ICPC.  First, we must consider input/output size.  The problem statement gives the following ranges for $n$ and $k$:&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;  1 \leq n \leq 17 \\&lt;br&gt;  0 \leq k \leq n&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;We can expect that this will fit in a 64-bit integer, as $n! \leq 2^{63}-1$ for $n\leq 20$.  Thus, we don’t even need to be careful in computing binomial coefficients due to intermediate overflow!  I’ll let the code (and comments) speak for itself:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.util.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Basic iterative factorial; just multiply all&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// the numbers less than or equal to n.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// returns 1 if n &amp;lt; 1 (which is important for n=0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; retval = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(n &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      retval *= n--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; retval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Naive binomial coefficient computation &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Generally, you need to watch overflow.  But,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// we can ignore that here because fact(17) &amp;lt; 2^63-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;binom&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fact(n)/(fact(k)*fact(n-k));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//While not recommended in general, we can use &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// a scanner because we&#39;re not reading a lot of input.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Scanner &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Precompute the derangement numbers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[] d = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// we might need values of D_n up to n=17&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, j=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i &amp;lt; d.length; i++, j*=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      d[i] = i*d[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] + j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Process the input&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; P = &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; caseNum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; caseNum &amp;lt; P; caseNum++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//S(n, k) = sum(binom(n-k, r)*d[n-r], r=0..n-k)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; ans = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; r &amp;lt;= n-k; r++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ans += binom(n-k, r)*d[n-r];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      System.out.&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d %d\n&quot;&lt;/span&gt;, caseNum+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Further-Reference&quot;&gt;&lt;a href=&quot;#Further-Reference&quot; class=&quot;headerlink&quot; title=&quot;Further Reference&quot;&gt;&lt;/a&gt;Further Reference&lt;/h2&gt;&lt;p&gt;Derangements are discussed in Concrete Mathematics by Graham, Knuth, and Patashnik on pages 193-196.  In those pages, the identities shown in this blog entry are derived.  Also discussed is a closely related problem that may be called $r$-derangements.&lt;/p&gt;
&lt;p&gt;In the $r$-derangement problem, we seek the number of arrangements in which exactly $r$ elements are in their original place.  (The number of $0$-derangements, then, is just $D_n$.)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This past week, my ICPC team worked the 2013 Greater New York Regional problem packet.  One of my favorite problems in this set was Problem E: Deranged Exams.  The code required to solve this problem isn’t that complicated, but the math behind it is a little unusual.  In this post, I aim to explain the math and provide a solution to this problem.&lt;/p&gt;
&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description&quot;&gt;&lt;/a&gt;Problem Description&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;http://acmgnyr.org/year2013/e.pdf&quot;&gt;full problem statement&lt;/a&gt; is archived online; in shortened form, we can consider the problem to be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a “matching” test of $n$ questions (each question maps to exactly one answer, and no two questions have the same answer), how many possible ways are there to answer at least the first $k$ questions wrong?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It turns out that there’s a really nice solution to this problem using a topic from combinatorics called “derangements.”  (Note that the problem title was a not-so-subtle hint towards the solution.)&lt;/p&gt;
&lt;h2 id=&quot;Derangements&quot;&gt;&lt;a href=&quot;#Derangements&quot; class=&quot;headerlink&quot; title=&quot;Derangements&quot;&gt;&lt;/a&gt;Derangements&lt;/h2&gt;&lt;p&gt;While the idea of a permutation should be familiar to most readers, the closely related topic of a derangement is rarely discussed in most undergraduate curriculum.  So, it is reasonable to start with a definition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A derangement is a permutation in which no element is in its original place.  The number of derangements on $n$ elements is denoted $D_n$; this is also called the subfactorial of $n$, denoted $!n$. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The sequence $\langle D_n\rangle$ is &lt;a href=&quot;https://oeis.org/A000166&quot;&gt;A000166&lt;/a&gt; in OEIS (a website with which, by the way, every competitive programmer should familiarize themselves).&lt;/p&gt;
&lt;p&gt;It turns out that there is both a recursive and an explicit formula for $D_n$:&lt;/p&gt;
&lt;span&gt;$$\begin{aligned}
D_n &amp;amp;= (-1)^n \sum_k\binom{n}{k} (-1)^k k! \\
&amp;amp;= n\cdot D_{n-1} + (-1)^n;\;(D_0=1)
\end{aligned}$$&lt;/span&gt;&lt;!-- Has MathJax --&gt;
&lt;p&gt;This is significant because we can use the explicit formulation for computing single values of derangements, or we can use dynamic programming to rapidly compute $D_n$ for relatively small $n$.&lt;/p&gt;
    
    </summary>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/categories/computer-science/"/>
    
      <category term="contests" scheme="http://www.apnorton.com/blog/categories/computer-science/contests/"/>
    
    
      <category term="algorithms" scheme="http://www.apnorton.com/blog/tags/algorithms/"/>
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
      <category term="contests" scheme="http://www.apnorton.com/blog/tags/contests/"/>
    
  </entry>
  
  <entry>
    <title>Eight Books on Math and Computer Science</title>
    <link href="http://www.apnorton.com/blog/2015/06/09/Eight-Books-on-Math-and-Computer-Science/"/>
    <id>http://www.apnorton.com/blog/2015/06/09/Eight-Books-on-Math-and-Computer-Science/</id>
    <published>2015-06-09T04:41:23.000Z</published>
    <updated>2016-12-19T22:55:04.614Z</updated>
    
    <content type="html">&lt;p&gt;A friend recently emailed me asking for titles of books I’d recommend to read over the summer, particularly to prepare for computer science and mathematics.  I’ve adapted my suggestions into this post.  I’d like to note that I’ve restricted my responses to “non-textbooks;” otherwise, I’d have several more additions that would increase the average page count and price quite drastically.  As such, these books don’t have problems to work or present an extreme level of detail, but in many cases they present enough information to provide a strong foundation and context for math and CS classes.&lt;/p&gt;
&lt;h2 id=&quot;From-Mathematics-to-Generic-Programming&quot;&gt;&lt;a href=&quot;#From-Mathematics-to-Generic-Programming&quot; class=&quot;headerlink&quot; title=&quot;From Mathematics to Generic Programming&quot;&gt;&lt;/a&gt;From Mathematics to Generic Programming&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Alexander Stepanov and Daniel Rose (&lt;a href=&quot;http://www.amazon.com/Mathematics-Generic-Programming-Alexander-Stepanov/dp/0321942043&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I will most likely write a separate blog post about this book.  I read it during the end of the fall semester and found that it presented a very interesting approach to designing reusable code by utilizing principles from abstract algebra.  It’s written to be accessible by someone who hasn’t studied abstract algebra yet, which means it also can serve as an introduction to that subject.&lt;/p&gt;
&lt;h2 id=&quot;CODE-The-Hidden-Language-of-Computer-Hardware-and-Software&quot;&gt;&lt;a href=&quot;#CODE-The-Hidden-Language-of-Computer-Hardware-and-Software&quot; class=&quot;headerlink&quot; title=&quot;CODE: The Hidden Language of Computer Hardware and Software&quot;&gt;&lt;/a&gt;CODE: The Hidden Language of Computer Hardware and Software&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Charles Petzold (&lt;a href=&quot;http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Four years ago, I wrote &lt;a href=&quot;http://robodesigners.blogspot.com/2011/04/code-hidden-language-of-computer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a review&lt;/a&gt; of this book on RoboDesigners.  At that time, my perspective was that of a high school student and I thought the book was interesting; with the additional perspective of a year of college study in Computer Science, I cannot recommend this book highly enough.&lt;/p&gt;
&lt;p&gt;By “building” a computer piece-by-piece from the idea of a relay through developing a simple assembly language, it covers nearly all of the material as the Digital Logic Design course I took, but in an easy-to-read book.  If you comprehend the material in this book, you will be able to coast through DLD.&lt;/p&gt;
&lt;h2 id=&quot;A-Mathematician’s-Apology&quot;&gt;&lt;a href=&quot;#A-Mathematician’s-Apology&quot; class=&quot;headerlink&quot; title=&quot;A Mathematician’s Apology&quot;&gt;&lt;/a&gt;A Mathematician’s Apology&lt;/h2&gt;&lt;p&gt;&lt;em&gt;G. H. Hardy (&lt;a href=&quot;http://www.amazon.com/Mathematicians-Apology-Canto-Classics/dp/110760463X/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When a mathematician with Hardy’s stature writes a book on why he studies math, it’s probably advisable to read it!  Multiple professors of mine have said it’s a book any mathematician should read and I wholeheartedly agree.  It’s really short (the printing I’ve linked above is only 154 pages), but the content is amazing.  Hardy addresses the complaints many have with pure math and embodies the spirit of “doing mathematics for mathematics’ sake.”  If you are thinking about pursuing a theoretical route in either CS or math, I highly recommend you read this book.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;The-Code-Book&quot;&gt;&lt;a href=&quot;#The-Code-Book&quot; class=&quot;headerlink&quot; title=&quot;The Code Book&quot;&gt;&lt;/a&gt;The Code Book&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Simon Singh (&lt;a href=&quot;http://www.amazon.com/Code-Book-Science-Secrecy-Cryptography/dp/0385495323/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I love codes–anything resembling secret or hidden knowledge has a particular allure.  Singh does a great job discussing the past, present, and likely future of codes, ciphers, and cryptography in this book.  Starting with Caesar Shift (what good historic code book doesn’t?) and traveling through centuries to discuss the Vigenère cipher, RSA encryption, and the general idea of quantum cryptography, this book gave me a broad understanding of where we are at now with codes and how we got here.  It also includes the clearest description of the actual flaws in Enigma that I’ve ever read.&lt;/p&gt;
&lt;h2 id=&quot;In-Pursuit-of-the-Unknown-17-Equations-that-Changed-the-World&quot;&gt;&lt;a href=&quot;#In-Pursuit-of-the-Unknown-17-Equations-that-Changed-the-World&quot; class=&quot;headerlink&quot; title=&quot;In Pursuit of the Unknown: 17 Equations that Changed the World&quot;&gt;&lt;/a&gt;In Pursuit of the Unknown: 17 Equations that Changed the World&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Ian Stewart (&lt;a href=&quot;http://www.amazon.com/Pursuit-Equations-That-Changed-World/dp/0465085989/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Every equation has a story–how was this truth discovered, who discovered it, and what exists now because of it?  This book examines 17 equations and their impact on society.  If you’re actually reading this blog, the early chapters will probably be old hat, but after (and including) Chapter 4 the content becomes quite interesting. &lt;/p&gt;
&lt;p&gt;Reading Chapter 4 helped me visualize vector fields for Vector Calculus and Differential Equations in the context of planetary movement (and it finally made me understand the age-old analogy for dense objects warping the fabric of spacetime).  The last chapter was also memorable for its description of a particular equation used in high-frequency stock trades, the misapplication of which Stewart claims was partially responsible for the 2008 recession.&lt;/p&gt;
&lt;h2 id=&quot;The-Music-of-the-Primes&quot;&gt;&lt;a href=&quot;#The-Music-of-the-Primes&quot; class=&quot;headerlink&quot; title=&quot;The Music of the Primes&quot;&gt;&lt;/a&gt;The Music of the Primes&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Marcus du Sautoy (&lt;a href=&quot;http://www.amazon.com/Music-Primes-Searching-Greatest-Mathematics/dp/0062064010/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It is said that Gauss once asserted that “Mathematics is the queen of the sciences and number theory is the queen of mathematics.”  This book outlines the history parts of this “queen of mathematics” that relate to prime numbers.  It includes mini-biographies on the people who made great breakthroughs in the search for a formula for the nth prime; obviously the story isn’t finished yet, but it’s a pretty neat overview of how primes are important, who made them important, and other related topics.&lt;/p&gt;
&lt;p&gt;As someone who finds Number Theory fascinating, I’d recommend this book especially to people who like Project Euler problems–not because it will help you solve the problems per-se, but because it provides some historical background to the people who developed the equations you use to solve Project Euler problems.&lt;/p&gt;
&lt;h2 id=&quot;To-Engineer-Is-Human&quot;&gt;&lt;a href=&quot;#To-Engineer-Is-Human&quot; class=&quot;headerlink&quot; title=&quot;To Engineer Is Human&quot;&gt;&lt;/a&gt;To Engineer Is Human&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Henry Petroski (&lt;a href=&quot;http://www.amazon.com/To-Engineer-Is-Human-Successful/dp/0679734163&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a wonderfully dry book–one that might bore some people, but I &lt;em&gt;loved&lt;/em&gt; it.  (I actually read this right after reading &lt;em&gt;CODE&lt;/em&gt;.)   Petroski discusses the role of failure in design, why the principles of engineering are intuitively “built-in” to the human brain, and how engineers must account for error in their designs.  The most thought-provoking and the single most vivid idea that has stuck with me since reading this book was a connection he drew between computerized design and an increased failure rate in new products (toys, furniture, or even buildings).&lt;/p&gt;
&lt;h2 id=&quot;The-Abolition-of-Man&quot;&gt;&lt;a href=&quot;#The-Abolition-of-Man&quot; class=&quot;headerlink&quot; title=&quot;The Abolition of Man&quot;&gt;&lt;/a&gt;The Abolition of Man&lt;/h2&gt;&lt;p&gt;&lt;em&gt;C. S. Lewis (&lt;a href=&quot;http://www.amazon.com/The-Abolition-Man-C-Lewis/dp/0060652942&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;C. S. Lewis is known primarily as the author of &lt;em&gt;The Chronicles of Narnia&lt;/em&gt;, then as a Christian Apologist.  So then, &lt;em&gt;why&lt;/em&gt; am I asserting that this particular book is relevant to all computer scientists?  In fact, this book is of particular interest to anyone working in a field of applied science.  It provokes thought on why we’re solving the problems that we are and why we’re even interested in the sciences.  In particular, it discusses the effect of a morality outside ourselves on the purpose of science; the third and final chapter paints a vivid picture of what happens when we reduce mankind simply to “nature.”  This book bears re-reading, and perhaps someday I’ll write another blog post on why every scientist (applied or not) should read this book.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;A friend recently emailed me asking for titles of books I’d recommend to read over the summer, particularly to prepare for computer science and mathematics.  I’ve adapted my suggestions into this post.  I’d like to note that I’ve restricted my responses to “non-textbooks;” otherwise, I’d have several more additions that would increase the average page count and price quite drastically.  As such, these books don’t have problems to work or present an extreme level of detail, but in many cases they present enough information to provide a strong foundation and context for math and CS classes.&lt;/p&gt;
&lt;h2 id=&quot;From-Mathematics-to-Generic-Programming&quot;&gt;&lt;a href=&quot;#From-Mathematics-to-Generic-Programming&quot; class=&quot;headerlink&quot; title=&quot;From Mathematics to Generic Programming&quot;&gt;&lt;/a&gt;From Mathematics to Generic Programming&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Alexander Stepanov and Daniel Rose (&lt;a href=&quot;http://www.amazon.com/Mathematics-Generic-Programming-Alexander-Stepanov/dp/0321942043&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I will most likely write a separate blog post about this book.  I read it during the end of the fall semester and found that it presented a very interesting approach to designing reusable code by utilizing principles from abstract algebra.  It’s written to be accessible by someone who hasn’t studied abstract algebra yet, which means it also can serve as an introduction to that subject.&lt;/p&gt;
&lt;h2 id=&quot;CODE-The-Hidden-Language-of-Computer-Hardware-and-Software&quot;&gt;&lt;a href=&quot;#CODE-The-Hidden-Language-of-Computer-Hardware-and-Software&quot; class=&quot;headerlink&quot; title=&quot;CODE: The Hidden Language of Computer Hardware and Software&quot;&gt;&lt;/a&gt;CODE: The Hidden Language of Computer Hardware and Software&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Charles Petzold (&lt;a href=&quot;http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Four years ago, I wrote &lt;a href=&quot;http://robodesigners.blogspot.com/2011/04/code-hidden-language-of-computer.html&quot;&gt;a review&lt;/a&gt; of this book on RoboDesigners.  At that time, my perspective was that of a high school student and I thought the book was interesting; with the additional perspective of a year of college study in Computer Science, I cannot recommend this book highly enough.&lt;/p&gt;
&lt;p&gt;By “building” a computer piece-by-piece from the idea of a relay through developing a simple assembly language, it covers nearly all of the material as the Digital Logic Design course I took, but in an easy-to-read book.  If you comprehend the material in this book, you will be able to coast through DLD.&lt;/p&gt;
&lt;h2 id=&quot;A-Mathematician’s-Apology&quot;&gt;&lt;a href=&quot;#A-Mathematician’s-Apology&quot; class=&quot;headerlink&quot; title=&quot;A Mathematician’s Apology&quot;&gt;&lt;/a&gt;A Mathematician’s Apology&lt;/h2&gt;&lt;p&gt;&lt;em&gt;G. H. Hardy (&lt;a href=&quot;http://www.amazon.com/Mathematicians-Apology-Canto-Classics/dp/110760463X/&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When a mathematician with Hardy’s stature writes a book on why he studies math, it’s probably advisable to read it!  Multiple professors of mine have said it’s a book any mathematician should read and I wholeheartedly agree.  It’s really short (the printing I’ve linked above is only 154 pages), but the content is amazing.  Hardy addresses the complaints many have with pure math and embodies the spirit of “doing mathematics for mathematics’ sake.”  If you are thinking about pursuing a theoretical route in either CS or math, I highly recommend you read this book.&lt;/p&gt;
    
    </summary>
    
      <category term="book-reviews" scheme="http://www.apnorton.com/blog/categories/book-reviews/"/>
    
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/tags/computer-science/"/>
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
      <category term="general-computing" scheme="http://www.apnorton.com/blog/tags/general-computing/"/>
    
      <category term="books" scheme="http://www.apnorton.com/blog/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>How to Learn Haskell</title>
    <link href="http://www.apnorton.com/blog/2014/07/14/How-to-Learn-Haskell/"/>
    <id>http://www.apnorton.com/blog/2014/07/14/How-to-Learn-Haskell/</id>
    <published>2014-07-15T00:55:08.000Z</published>
    <updated>2016-12-19T22:55:04.614Z</updated>
    
    <content type="html">&lt;p&gt;To grow my programming repertoire, I decided to learn a functional language; at the recommendation of a friend, I selected &lt;a href=&quot;http://www.haskell.org/haskellwiki/Haskell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Haskell&lt;/a&gt;. Thus far, it seems great.  As a mathematician at heart, I love the way that the notation and language constructs resemble math (list comprehensions, tuples, function composition, etc).  In this blog post, I will outline the major resources I am using to learn Haskell.&lt;/p&gt;
&lt;p&gt;To learn Haskell, I am using the ebook &lt;a href=&quot;http://learnyouahaskell.com/chapters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Learn You a Haskell for Great Good&lt;/em&gt;&lt;/a&gt;.  Yes–terrible grammar in the title, but it’s (fairly) grammatically correct on the inside.  This is a great introduction to Haskell, although I’d highly recommend prior knowledge of another programming language like Java or C++.&lt;/p&gt;
&lt;p&gt;Unfortunately, that ebook is somewhat lacking in practice problems.  It does have examples, but there isn’t a true “exercise” section like one would find in a textbook.  This is a common fault with online programming tutorials; to be honest, creating a good exercise set is &lt;em&gt;hard&lt;/em&gt; work.  To remedy this problem, I turned to a favorite site of mine, &lt;a href=&quot;http://www.hackerrank.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HackerRank.com&lt;/a&gt;.  While designed for competitive programmers, this site also has an “introductory” set of functional programming challenges (see &lt;a href=&quot;https://www.hackerrank.com/categories/fp/intro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;).  These range in difficulty from very easy to extremely hard.  This provides a great compliment to the tutorial I referenced above.&lt;/p&gt;
&lt;p&gt;Finally, one last resource I am going to use after finishing &lt;em&gt;Learn You a Haskell&lt;/em&gt; is a &lt;a href=&quot;http://shuklan.com/haskell/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;set of lectures&lt;/a&gt; by former University of Virginia student-teacher &lt;a href=&quot;http://shukla.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nishant Shukla&lt;/a&gt;.  Although I have not been able to view them in great detail, they appear to present a great introduction to Haskell.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;To grow my programming repertoire, I decided to learn a functional language; at the recommendation of a friend, I selected &lt;a href=&quot;http:
    
    </summary>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/categories/computer-science/"/>
    
      <category term="programming-languages" scheme="http://www.apnorton.com/blog/categories/computer-science/programming-languages/"/>
    
    
      <category term="functional-programming" scheme="http://www.apnorton.com/blog/tags/functional-programming/"/>
    
      <category term="websites" scheme="http://www.apnorton.com/blog/tags/websites/"/>
    
  </entry>
  
  <entry>
    <title>Factorization and Divisor Count</title>
    <link href="http://www.apnorton.com/blog/2014/07/14/Factorization-and-Divisor-Count/"/>
    <id>http://www.apnorton.com/blog/2014/07/14/Factorization-and-Divisor-Count/</id>
    <published>2014-07-14T15:59:15.000Z</published>
    <updated>2016-12-19T22:55:04.614Z</updated>
    
    <content type="html">&lt;p&gt;How many divisors are there of the number $1281942112$?  It turns out that determining the answer to this problem is (at most) only as difficult as determining the prime factorization of the number.  In this blog post, I will outline a solution to this (and similar) problems.&lt;/p&gt;
&lt;h2 id=&quot;The-Math&quot;&gt;&lt;a href=&quot;#The-Math&quot; class=&quot;headerlink&quot; title=&quot;The Math&quot;&gt;&lt;/a&gt;The Math&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;http://mathworld.wolfram.com/FundamentalTheoremofArithmetic.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fundamental Theorem of Arithmetic&lt;/a&gt; guarantees each positive integer greater than $1$ a unique prime factorization.  We write this factorization as:&lt;/p&gt;
&lt;p&gt;$$N = p_0^{e_0}p_1^{e_1}\cdots p_n^{e_n}$$&lt;/p&gt;
&lt;p&gt;where $p_k$ is a prime number, and $e_k$ is its corresponding exponent.  This provides us with useful information regarding divisors of $N$: any divisor of $N$ must be comprised of some combination of those prime factors (and exponents).  Specifically, we can define the divisor, $D$, as:&lt;/p&gt;
&lt;p&gt;$$D = p_0^{a_0}p_1^{a_1}\cdots p_n^{a_n}$$&lt;/p&gt;
&lt;p&gt;where the $p_k$ are the same as in the factorization of $N$ and $a_k \in {0, 1, \ldots, e_k}$.  To find the total number of divisors, we multiply together the number of options we have for each exponent.  That is,&lt;/p&gt;
&lt;p&gt;$$\text{Number of Divisors}\; = (e_0+1)(e_1+1)\cdots(e_n + 1)$$&lt;/p&gt;
&lt;p&gt;Example:  Consider $N = 20$.  In this case, $N$ has $6$ divisors; to determine this without needing to list them all, we may note that $N = 2^2\cdot 5^1$.  Using the notation described above, this means that $p_0 = 2,\;p_1 = 5$ and $e_0 = 2\;e_1 = 1$.  Each of our divisors will be of the form $2^{a_0}\cdot 5^{a_1}$, where $a_0$ could be $0, 1,$ or $2$ and $a_1$ could be $0$ or $1$.  Since we have $e_0+1 = 3$ options for $a_0$ and $e_1+1 = 2$ options for $a_1$, we have $3\cdot 2 = 6$ total divisors.  In case you were wondering, the list of divisors is:&lt;/p&gt;
&lt;p&gt;$${2^0 5^0, 2^1 5^0,2^2 5^0,2^0 5^1,2^1 5^1,2^2 5^1}$$&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;The-Program&quot;&gt;&lt;a href=&quot;#The-Program&quot; class=&quot;headerlink&quot; title=&quot;The Program&quot;&gt;&lt;/a&gt;The Program&lt;/h2&gt;&lt;p&gt;We’re not out of the woods yet–we have a formula, but we need to write a program to make use of it.  The first thing our program needs is a list of primes.  I’m going to assume you have a function already that can generate a list of primes.  A prime-listing function is an important tool in any programmer’s toolkit, but I’ll save that for a future post.&lt;/p&gt;
&lt;p&gt;The pseudocode for our program is below:&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;numberOfDivisors: int &lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt; -&amp;gt; int divisorCount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  divisorCount = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (p = 1 to &lt;span class=&quot;built_in&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;)) &amp;amp;&amp;amp; p prime):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exponent = 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Determine exponent of p in prime factorization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (p divides &lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      exponent++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt; / p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//Update divisorCount&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     divisorCount = divisorCount * (exponent + 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//In this case, there is one prime factor greater than the square root of N&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt; != 1) divisorCount = divisorCount * 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; divisorCount&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This is mostly straightforward: We iterate through all prime numbers less than the square root of N.  For each prime, we determine how many times it divides N–this is that prime’s exponent.  We then multiply the current divisor count by one more than the exponent.  I have pushed an update to my &lt;a href=&quot;https://github.com/apnorton/math&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;math GitHub repository&lt;/a&gt; that includes a Java version of this algorithm in NumberTheory.java.&lt;/p&gt;
&lt;p&gt;If we kept track of which primes divide $N$ (for example, adding them to a List whenever we enter the while loop) this program is easily modified to output the prime factorization of a number.&lt;/p&gt;
&lt;h2 id=&quot;The-Analysis&quot;&gt;&lt;a href=&quot;#The-Analysis&quot; class=&quot;headerlink&quot; title=&quot;The Analysis&quot;&gt;&lt;/a&gt;The Analysis&lt;/h2&gt;&lt;p&gt;Before analyzing the performance of the algorithm, it would be best to explain why we only need to use primes less than $\sqrt{N}$, not primes less than $N$.  This is because &lt;strong&gt;there can only be one prime factor of $N$ greater than $\sqrt{N}$, and (if there is one) it must have only be raised to the $1$st power.&lt;/strong&gt;  A proof by contradiction works well here (I’m skipping some rigor, please don’t kill me):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Assume that there are two prime factors (not necessarily unique) $p$ and $q$ of $N$, such that $p,q \gt \sqrt{N}$.  Let the product of the remaining prime factors be some integer $m$.  Then we have:&lt;/p&gt;
&lt;p&gt;   $$\begin{align}&lt;br&gt;       N &amp;amp;= p\cdot q\cdot m \&lt;br&gt;         &amp;amp;\le p\cdot q \&lt;br&gt;         &amp;amp;\lt \sqrt{N}\sqrt{N}\&lt;br&gt;         &amp;amp;\lt N\end{align}$$&lt;/p&gt;
&lt;p&gt;This is clearly a contradiction, thus we have proven that there cannot be at least two prime factors of $N$ greater than $\sqrt{N}$.  Equivalently, there may only at most one prime factor of $N$ greater than $\sqrt{N}$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This explains why we don’t need to use primes greater than $\sqrt{N}$: if, after “dividing out” all primes less than $\sqrt{N}$, we are left with a number, then that number must be the single prime factor of $N$ greater than $\sqrt{N}$.&lt;/p&gt;
&lt;p&gt;On to the performance of the algorithm.  Assuming we are &lt;em&gt;given&lt;/em&gt; a list of prime numbers (and don’t have to compute them), this procedure has a time complexity of $\mathcal{O}\left(\pi\left(\sqrt{N}\right)\text{lg}(N)\right)$ and $\Omega\left(\pi\left(\sqrt{N}\right)\right)$, where $\pi(x)$ is the &lt;a href=&quot;http://mathworld.wolfram.com/PrimeCountingFunction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;prime counting function&lt;/a&gt; and $N$ is the input number.  ($\Omega$ provides a lower bound, and $\mathcal{O}$ provides an upper bound.)  Let’s see why.&lt;/p&gt;
&lt;p&gt;We have an outer-most for loop that makes one iteration for each prime less than $\sqrt{N}$.  This gives us the “$\pi\left(\sqrt{N}\right)$” part of the bounds.  For the lower bound, we would assume the inside of the for loop executes in constant time, every time.  (That is, we never enter the while loop.)  This occurs when $N$ is a prime number.  For the upper bound, we may assume that we execute the while loop at most $\text{lg}(N)$ times each iteration.  This is because $\text{lg}(N) = \log_2(N) \gt \log_b(N)$ for $N \gt 2$ and integer $b\gt 2$, and $\lfloor\log_{p_k}(N)\rfloor$ provides a fairly close upper bound on the exponent of $p_k$ in the prime factorization of $N$.&lt;/p&gt;
&lt;p&gt;The upper bound can be improved by performing some summation and simplification, but it’s close enough to show how fast this algorithm is.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;How many divisors are there of the number $1281942112$?  It turns out that determining the answer to this problem is (at most) only as difficult as determining the prime factorization of the number.  In this blog post, I will outline a solution to this (and similar) problems.&lt;/p&gt;
&lt;h2 id=&quot;The-Math&quot;&gt;&lt;a href=&quot;#The-Math&quot; class=&quot;headerlink&quot; title=&quot;The Math&quot;&gt;&lt;/a&gt;The Math&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;http://mathworld.wolfram.com/FundamentalTheoremofArithmetic.html&quot;&gt;Fundamental Theorem of Arithmetic&lt;/a&gt; guarantees each positive integer greater than $1$ a unique prime factorization.  We write this factorization as:&lt;/p&gt;
&lt;p&gt;$$N = p_0^{e_0}p_1^{e_1}\cdots p_n^{e_n}$$&lt;/p&gt;
&lt;p&gt;where $p_k$ is a prime number, and $e_k$ is its corresponding exponent.  This provides us with useful information regarding divisors of $N$: any divisor of $N$ must be comprised of some combination of those prime factors (and exponents).  Specifically, we can define the divisor, $D$, as:&lt;/p&gt;
&lt;p&gt;$$D = p_0^{a_0}p_1^{a_1}\cdots p_n^{a_n}$$&lt;/p&gt;
&lt;p&gt;where the $p_k$ are the same as in the factorization of $N$ and $a_k \in {0, 1, \ldots, e_k}$.  To find the total number of divisors, we multiply together the number of options we have for each exponent.  That is,&lt;/p&gt;
&lt;p&gt;$$\text{Number of Divisors}\; = (e_0+1)(e_1+1)\cdots(e_n + 1)$$&lt;/p&gt;
&lt;p&gt;Example:  Consider $N = 20$.  In this case, $N$ has $6$ divisors; to determine this without needing to list them all, we may note that $N = 2^2\cdot 5^1$.  Using the notation described above, this means that $p_0 = 2,\;p_1 = 5$ and $e_0 = 2\;e_1 = 1$.  Each of our divisors will be of the form $2^{a_0}\cdot 5^{a_1}$, where $a_0$ could be $0, 1,$ or $2$ and $a_1$ could be $0$ or $1$.  Since we have $e_0+1 = 3$ options for $a_0$ and $e_1+1 = 2$ options for $a_1$, we have $3\cdot 2 = 6$ total divisors.  In case you were wondering, the list of divisors is:&lt;/p&gt;
&lt;p&gt;$${2^0 5^0, 2^1 5^0,2^2 5^0,2^0 5^1,2^1 5^1,2^2 5^1}$$&lt;/p&gt;
    
    </summary>
    
      <category term="math" scheme="http://www.apnorton.com/blog/categories/math/"/>
    
      <category term="number-theory" scheme="http://www.apnorton.com/blog/categories/math/number-theory/"/>
    
    
      <category term="algorithms" scheme="http://www.apnorton.com/blog/tags/algorithms/"/>
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
      <category term="project-euler" scheme="http://www.apnorton.com/blog/tags/project-euler/"/>
    
      <category term="number-theory" scheme="http://www.apnorton.com/blog/tags/number-theory/"/>
    
  </entry>
  
  <entry>
    <title>&quot;Big-O&quot; notation: An Introduction to Asymptotics of Loops</title>
    <link href="http://www.apnorton.com/blog/2014/06/09/Big-O-notation-An-Introduction-to-Asymptotics-of-Loops/"/>
    <id>http://www.apnorton.com/blog/2014/06/09/Big-O-notation-An-Introduction-to-Asymptotics-of-Loops/</id>
    <published>2014-06-10T03:28:45.000Z</published>
    <updated>2016-12-19T22:55:04.614Z</updated>
    
    <content type="html">&lt;p&gt;Algorithmic efficiency is imperative for success in programming competitions; your programs must be accurate and fast.  To help evaluate algorithms for speed, computer scientists focus on what is called  “asymptotics,” or “asymptotic analysis.”  The key question answered by asymptotics is: &lt;strong&gt;“When your input gets &lt;em&gt;really&lt;/em&gt; big, how many steps does your program take?”&lt;/strong&gt;  This post seeks to explain basic asymptotic analysis and its application to computing simple program runtime.&lt;/p&gt;
&lt;p&gt;The underlying principle of asymptotic analysis is that a program’s runtime depends on the number of &lt;em&gt;elementary operations&lt;/em&gt; it performs.  The fewer elementary operations, the faster the program (and vice-versa).  What do I mean by “elementary operation?”  By this, I refer to any operation such that the runtime is not affected by the input size.  This is more commonly referred to as a &lt;em&gt;constant-time&lt;/em&gt; operation.  Examples of such operations are assignment, basic arithmetic operations (&lt;code&gt;+, -, *, /, %&lt;/code&gt;), accessing an array element, increment/decrement operations, function returns, and boolean expressions. &lt;/p&gt;
&lt;h2 id=&quot;A-First-Example&quot;&gt;&lt;a href=&quot;#A-First-Example&quot; class=&quot;headerlink&quot; title=&quot;A First Example&quot;&gt;&lt;/a&gt;A First Example&lt;/h2&gt;&lt;p&gt;So, a good way of gauging the runtime of a program is to count the number of elementary operations it performs.  Let’s jump right in by analyzing a simple program. &lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; N) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Obviously, this program always returns $N$, so the loop is unnecessary.  However, let’s just analyze the method as-is.&lt;/p&gt;
&lt;p&gt;Lines 2 and 7 each contribute one constant-time operation.  The loop contributes two constant-time operations per iteration (one for the comparison, one for the increment), plus one extra constant-time operation for the final comparison that terminates the loop.  So, the total number of operations is:&lt;/p&gt;
&lt;p&gt;$$1 + 1 + \underbrace{\sum_{i = 0}^N 2}_{\text{loop operations}} + 1 = 3 + 2N$$&lt;/p&gt;
&lt;p&gt;(Notice how I used sigma (summation) notation for counting a loop’s operation. This is useful, because loops and sigma notation behave in much the same way.)&lt;/p&gt;
&lt;p&gt;Thus, it will take $3+2N$ operations to perform that method, given an input $N$.  If each operation takes $2\times 10^{-9}$ (about the speed of a 2 GHz processor), it would take 5 seconds to run this program for an input of $N=10^{10}$.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Let’s-make-that-easier…&quot;&gt;&lt;a href=&quot;#Let’s-make-that-easier…&quot; class=&quot;headerlink&quot; title=&quot;Let’s make that easier…&quot;&gt;&lt;/a&gt;Let’s make that easier…&lt;/h2&gt;&lt;p&gt;That was a lot of work for such a simple result; is there an easier way to get a similar answer?  Fortunately, the answer is &lt;strong&gt;&lt;em&gt;yes!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, let us introduce something that we will call “Big-O notation.”  This is a way of describing the long-term growth of a function.  The rigorous definition of Big-O is beyond the scope of this blog, but the following should suffice:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We say $f(n)$ is $\mathcal{O}(g(n))$ if and only if a constant multiple of $g(n)$ is greater than $f(n)$, when $n$ is sufficiently large.  Simply put, this means that, in the long term, $g$ grows as fast or faster than $f$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As an example, we can say that $f(n) = 3n+2$ is $\mathcal{O}(n)$, because the function $g(n) = n$ grows exactly as fast as $f(n)$.  Or, we can say, $f$ is $\mathcal{O}(n^2)$, because $n^2$ grows faster than $f$, for sufficiently large $n$.  Basically, this means we can ignore two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We can ignore anything that is “small” in the long-term.  For example, if $f(x) = 4x^3 + 2x + 3 + \frac{1}{x}$, everything except the “$4x^3$” part becomes small (in comparison) as $x$ gets big.&lt;/li&gt;
&lt;li&gt;We can also ignore coefficients.  That is, we don’t have to worry about the difference between $4x^3$ and $x^3$.  As $x$ gets really big, the two graphs are so close that it doesn’t really matter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To apply this to algorithm analysis, this means that we only have to worry about the “biggest time-user,” rather than all the individual steps.  For most simple programs, this means focusing on loops.  (In advanced problems, you must account for recursion.)&lt;/p&gt;
&lt;p&gt;Next, we recall that a single loop can be represented with a single summation sign.  One can fairly quickly see that a nested loop can be represented with a “sum of sums,” or multiple, nested summation signs.  It can be proven that:&lt;/p&gt;
&lt;p&gt;$$ \underbrace{\sum_N\left(\sum_N\left(\cdots\sum_N f(N)\right)\right)}_{k \text{ summation signs}} = \mathcal{O}(N^k\cdot f(N)) $$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important Result&lt;/strong&gt;&lt;br&gt;Interpreted into programmer-speak, this means that &lt;em&gt;a program with nested loops (each executing ~$N$ times) to a maximum depth of $k$ will take $\mathcal{O}(N^k)$ operations to complete said loops.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Another-Example&quot;&gt;&lt;a href=&quot;#Another-Example&quot; class=&quot;headerlink&quot; title=&quot;Another Example&quot;&gt;&lt;/a&gt;Another Example&lt;/h2&gt;&lt;p&gt;So, let’s apply this idea to a bit more complicated program:&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; test(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; N; i++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i&lt;span class=&quot;comment&quot;&gt;; j &amp;lt; N; j++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      total++&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now we have a nested loop!  Looking at this program, we realize that the “deepest” nesting is only $2$ deep.  Thus, by our important result, we know that this program runs in $\mathcal{O}(N^2)$ time.&lt;/p&gt;
&lt;p&gt;This means, that as $N$ gets very large, doubling the input will result in a &lt;em&gt;quadruple&lt;/em&gt; increase in runtime.&lt;/p&gt;
&lt;h2 id=&quot;Other-Notes&quot;&gt;&lt;a href=&quot;#Other-Notes&quot; class=&quot;headerlink&quot; title=&quot;Other Notes&quot;&gt;&lt;/a&gt;Other Notes&lt;/h2&gt;&lt;p&gt;Obviously, there are more cases that can arise in algorithm analysis, instead of the simple loops given above.  For example, recursion and atypical loops (e.g. loops that double the counter each iteration, rather than adding one) require other methods than the “Important Result” I gave here.  Fortunately, there are a few common designations that arise:&lt;/p&gt;
&lt;p&gt;$$ \mathcal{O}(\log_2(n)),\;\mathcal{O}(n^k),\;\mathcal{O}(2^n),\;\mathcal{O}(n!),\;\mathcal{O}(n^n) $$&lt;/p&gt;
&lt;p&gt;I will note that I have written the above in increasing order of runtime.  That is, an algorithm that runs in $\mathcal{O}(\log_2(n))$ is faster than one that runs in $\mathcal{O}(2^n)$, etc.&lt;/p&gt;
&lt;p&gt;One can spend many hours studying asymptotic calculations.  In fact, there’s an entire chapter devoted to this in Concrete Mathematics by Graham, Knuth, and Patashink.  (I &lt;em&gt;highly&lt;/em&gt; recommend this book to anyone interested in programming; it is, quite literally, the best book I have ever opened related to computer science.)  For a thorough guide of the application of asymptotic calculations to programs, I recommend consulting a good Algorithms and Data Structures text.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Algorithmic efficiency is imperative for success in programming competitions; your programs must be accurate and fast.  To help evaluate algorithms for speed, computer scientists focus on what is called  “asymptotics,” or “asymptotic analysis.”  The key question answered by asymptotics is: &lt;strong&gt;“When your input gets &lt;em&gt;really&lt;/em&gt; big, how many steps does your program take?”&lt;/strong&gt;  This post seeks to explain basic asymptotic analysis and its application to computing simple program runtime.&lt;/p&gt;
&lt;p&gt;The underlying principle of asymptotic analysis is that a program’s runtime depends on the number of &lt;em&gt;elementary operations&lt;/em&gt; it performs.  The fewer elementary operations, the faster the program (and vice-versa).  What do I mean by “elementary operation?”  By this, I refer to any operation such that the runtime is not affected by the input size.  This is more commonly referred to as a &lt;em&gt;constant-time&lt;/em&gt; operation.  Examples of such operations are assignment, basic arithmetic operations (&lt;code&gt;+, -, *, /, %&lt;/code&gt;), accessing an array element, increment/decrement operations, function returns, and boolean expressions. &lt;/p&gt;
&lt;h2 id=&quot;A-First-Example&quot;&gt;&lt;a href=&quot;#A-First-Example&quot; class=&quot;headerlink&quot; title=&quot;A First Example&quot;&gt;&lt;/a&gt;A First Example&lt;/h2&gt;&lt;p&gt;So, a good way of gauging the runtime of a program is to count the number of elementary operations it performs.  Let’s jump right in by analyzing a simple program. &lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; N) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Obviously, this program always returns $N$, so the loop is unnecessary.  However, let’s just analyze the method as-is.&lt;/p&gt;
&lt;p&gt;Lines 2 and 7 each contribute one constant-time operation.  The loop contributes two constant-time operations per iteration (one for the comparison, one for the increment), plus one extra constant-time operation for the final comparison that terminates the loop.  So, the total number of operations is:&lt;/p&gt;
&lt;p&gt;$$1 + 1 + \underbrace{\sum_{i = 0}^N 2}_{\text{loop operations}} + 1 = 3 + 2N$$&lt;/p&gt;
&lt;p&gt;(Notice how I used sigma (summation) notation for counting a loop’s operation. This is useful, because loops and sigma notation behave in much the same way.)&lt;/p&gt;
&lt;p&gt;Thus, it will take $3+2N$ operations to perform that method, given an input $N$.  If each operation takes $2\times 10^{-9}$ (about the speed of a 2 GHz processor), it would take 5 seconds to run this program for an input of $N=10^{10}$.&lt;/p&gt;
    
    </summary>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/categories/computer-science/"/>
    
      <category term="algorithms" scheme="http://www.apnorton.com/blog/categories/computer-science/algorithms/"/>
    
    
      <category term="algorithms" scheme="http://www.apnorton.com/blog/tags/algorithms/"/>
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Green&#39;s Theorem and the Area of Polygons</title>
    <link href="http://www.apnorton.com/blog/2014/06/05/Greens-Theorem-and-The-Area-of-Polygons/"/>
    <id>http://www.apnorton.com/blog/2014/06/05/Greens-Theorem-and-The-Area-of-Polygons/</id>
    <published>2014-06-05T22:48:45.000Z</published>
    <updated>2016-12-19T22:55:04.614Z</updated>
    
    <content type="html">&lt;p&gt;I am an avid member of the &lt;a href=&quot;http://math.stackexchange.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Math.StackExchange&lt;/a&gt; community.  We have recently reached a milestone, as our request to create a site blog has been approved by the Stack Exchange administration. I volunteered to write a post which I believe should be useful to competition programmers.&lt;/p&gt;
&lt;p&gt;Using Green’s Theorem, &lt;a href=&quot;http://math.blogoverflow.com/2014/06/04/greens-theorem-and-area-of-polygons/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this post&lt;/a&gt; derives a formula for the area of any simple polygon, dependent solely on the coordinates of the vertices.  This is useful for some computational geometry problems in programming; for example, the formula can be used to compute the area of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Convex_hull&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;convex hull&lt;/a&gt; of a set of points.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I am an avid member of the &lt;a href=&quot;http://math.stackexchange.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Math.StackExchange&lt;/a&gt; community.  We h
    
    </summary>
    
      <category term="math" scheme="http://www.apnorton.com/blog/categories/math/"/>
    
      <category term="computational-geometry" scheme="http://www.apnorton.com/blog/categories/math/computational-geometry/"/>
    
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://www.apnorton.com/blog/2014/05/23/Hello-World/"/>
    <id>http://www.apnorton.com/blog/2014/05/23/Hello-World/</id>
    <published>2014-05-24T03:58:00.000Z</published>
    <updated>2016-12-19T22:55:04.614Z</updated>
    
    <content type="html">&lt;p&gt;After managing a fairly successful blog for many years about competitive robotics, I am attempting to re-brand myself as I begin my studies in the field of Computer Science and Mathematics.&lt;/p&gt;
&lt;p&gt;This blog will be the place I post interesting pieces of code I either develop or find, as well as math concepts useful to competitive programmers.  This blog will focus heavily on ACM-style competitions, and may occasionally contain hints or my solutions to problems from sites like USACO or UVA Online Judge.  I will attempt to post most of my code from here on a GitHub repository, but I’m still experimenting with that.&lt;/p&gt;
&lt;p&gt;Java is my “native language,” although I know Visual BASIC, C++ to a fair extent (few people can actually say they “really know” C++), and some Python.  I’ll try to mix up the languages I post (I’ll have a tag for each language), but I predict most of my posts will be Java-oriented.&lt;/p&gt;
&lt;p&gt;As always, topic suggestions are welcome via comments on any post.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;After managing a fairly successful blog for many years about competitive robotics, I am attempting to re-brand myself as I begin my studi
    
    </summary>
    
    
      <category term="meta" scheme="http://www.apnorton.com/blog/tags/meta/"/>
    
  </entry>
  
</feed>
