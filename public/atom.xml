<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>apnorton | blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://www.apnorton.com/blog/"/>
  <updated>2016-03-09T02:48:37.000Z</updated>
  <id>http://www.apnorton.com/blog/</id>
  
  <author>
    <name>Andrew Norton</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Visualizing Graphs in Program Output</title>
    <link href="http://www.apnorton.com/blog/2016/03/08/Visualizing-Graphs-in-Program-Output/"/>
    <id>http://www.apnorton.com/blog/2016/03/08/Visualizing-Graphs-in-Program-Output/</id>
    <published>2016-03-08T22:11:35.000Z</published>
    <updated>2016-03-09T02:48:37.000Z</updated>
    
    <content type="html">&lt;p&gt;Many computer science problems utilize &lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_%28discrete_mathematics%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;graph&lt;/a&gt;-based data structures.  Their use can range from explicit inclusion in an algorithm-centric problem (like path-finding) to a more “behind-the-scenes” presence in Bayesian networks or descriptions of finite automata.  Unfortunately, visualizing large graphs can be difficult to do, especially for debugging.  Unlike lists or dictionaries, which can be represented clearly by plain text printing, depicting a graph tends to require more graphics overhead than is reasonable for most programmers to write simply for debugging purposes.  I’ve found that &lt;a href=&quot;http://graphviz.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Graphviz&lt;/a&gt;, a free graph visualization utility, can be quite useful in debugging graph-related programs.&lt;/p&gt;
&lt;h2 id=&quot;Installing-Graphviz&quot;&gt;&lt;a href=&quot;#Installing-Graphviz&quot; class=&quot;headerlink&quot; title=&quot;Installing Graphviz&quot;&gt;&lt;/a&gt;Installing Graphviz&lt;/h2&gt;&lt;p&gt;If you’re on a Debian-based Linux OS (e.g. Ubuntu), you can install Graphviz using &lt;code&gt;apt-get&lt;/code&gt;.  Just run &lt;code&gt;$ sudo apt-get install graphviz&lt;/code&gt; and you’ll have everything you need to complete the steps in this blog post.  Mac OS X users can use &lt;code&gt;brew&lt;/code&gt; equivalently.&lt;/p&gt;
&lt;p&gt;Windows users should install using a binary downloaded from the &lt;a href=&quot;http://graphviz.org/Download_windows.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Graphviz Windows page&lt;/a&gt;, but there might be some issues with setting the &lt;code&gt;PATH&lt;/code&gt; variable for running in the commandline.&lt;/p&gt;
&lt;h2 id=&quot;Making-a-basic-graph&quot;&gt;&lt;a href=&quot;#Making-a-basic-graph&quot; class=&quot;headerlink&quot; title=&quot;Making a basic graph&quot;&gt;&lt;/a&gt;Making a basic graph&lt;/h2&gt;&lt;p&gt;Once you’ve installed, the next thing you’ll want to do is create a basic graph to ensure the installation succeeded and to gain practice using Graphviz tools.  We do this by creating a &lt;code&gt;*.dot&lt;/code&gt; file that describes the graph we wish to display.  If you’re the type of person who likes to jump right in and experiment first before reading too much, or if you love formal language specification, the &lt;a href=&quot;http://www.graphviz.org/content/dot-language&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOT grammar&lt;/a&gt; is fairly readable and can give a quick introduction to creating DOT files.&lt;/p&gt;
&lt;p&gt;The below is a fairly representative DOT file to demonstrate some of the capabilities of Graphviz. Open your favorite text editor, copy/paste it in, and save it as &lt;code&gt;firstgraph.dot&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;firstgraph.dot&lt;/span&gt;&lt;a href=&quot;/blog/downloads/code/firstgraph.dot&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;digraph G {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Style information for nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A [style=&lt;span class=&quot;string&quot;&gt;&quot;filled&quot;&lt;/span&gt;, color=&lt;span class=&quot;string&quot;&gt;&quot;.05 .3 1.0&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Edge declarations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A -&amp;gt; {B, C};&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  D -&amp;gt; E [label=&lt;span class=&quot;string&quot;&gt;&quot;-1&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  E -&amp;gt; F [label=&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  F -&amp;gt; D [label=&lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This creates a directed graph (also called a &lt;em&gt;digraph&lt;/em&gt;) with six nodes and two connected components.  Some of the edges have labels, and one of the nodes is colored.  After you’ve copied (or downloaded) this file, open up a terminal to the directory with &lt;code&gt;firstgraph.dot&lt;/code&gt; in it and run &lt;code&gt;$ dot firstgraph.dot -Tpng -o firstgraph.png&lt;/code&gt;.  The resulting image file should look something like the below:&lt;/p&gt;
&lt;img src=&quot;/blog/2016/03/08/Visualizing-Graphs-in-Program-Output/firstgraph.jpg&quot; alt=&quot;The rendered `firstgraph.dot`&quot; title=&quot;The rendered `firstgraph.dot`&quot;&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;What did that terminal command do?  The &lt;code&gt;dot&lt;/code&gt; utility is used for producing an image corresponding to a &lt;em&gt;directed&lt;/em&gt; graph.  (If you want to create the diagram for an undirected graph, consider using &lt;code&gt;neato&lt;/code&gt;, or the other variants listed in &lt;code&gt;man dot&lt;/code&gt;.)  The &lt;code&gt;-Tpng&lt;/code&gt; flag will produce PNG output image output, and &lt;code&gt;-o firstgraph.png&lt;/code&gt; provides the output name.  If you don’t include the &lt;code&gt;-o&lt;/code&gt; flag, &lt;code&gt;dot&lt;/code&gt; will send its output straight to &lt;code&gt;stdout&lt;/code&gt;, which will produce a lot of garbage on the terminal.&lt;/p&gt;
&lt;h2 id=&quot;Creating-a-DOT-File-with-Python&quot;&gt;&lt;a href=&quot;#Creating-a-DOT-File-with-Python&quot; class=&quot;headerlink&quot; title=&quot;Creating a DOT File with Python&quot;&gt;&lt;/a&gt;Creating a DOT File with Python&lt;/h2&gt;&lt;p&gt;Most recently, I used Graphviz to depict the output of a graph coloring (approximation) algorithm within the register allocation routine for a compiler.  I wanted to make sure that each pair of adjacent nodes never shared the same color; looking at an adjacency list and checking the coloring by hand would have been difficult; however, by having my program create a DOT file describing the graph coloring, I can check the results at a glance:&lt;/p&gt;
&lt;img src=&quot;/blog/2016/03/08/Visualizing-Graphs-in-Program-Output/rig_small.jpg&quot; alt=&quot;Register interference graph (compiled with circo)&quot; title=&quot;Register interference graph (compiled with circo)&quot;&gt;
&lt;p&gt;This only required a few lines of Python code (see below), but produces very useful debugging information.  The below assumes we represent a graph as a dictionary that maps a vertex label to a set of adjacent vertex labels (essentially an adjacency list, but more pythonic), and writes the output to a file named &lt;code&gt;rig.dot&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;graphviz_dot_output.py&lt;/span&gt;&lt;a href=&quot;/blog/downloads/code/graphviz_dot_output.py&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;##&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# export_graph()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   Saves the graph to a dot file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   graph : a mapping of vertices to sets of vertices&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#           (adjacency map form)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;##&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;export_graph&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(graph, color=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# Map integer colorings to graphviz colors&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cmap = {  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;brown&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;maroon2&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;orangered&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;crimson&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;lightseagreen&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;gold&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;cyan&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;plum&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;salmon&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;rig.dot&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.write(&lt;span class=&quot;string&quot;&gt;&#39;graph G {\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# For each vertex u in the graph&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; u &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; graph.keys():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# Add coloring information&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; color: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f.write(&lt;span class=&quot;string&quot;&gt;&#39;  &quot;%s&quot; [color=%s, style=filled];\n&#39;&lt;/span&gt; % (u, cmap[color[u]]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;# For each neighbor v of u, add the edge&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; v &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; graph[u]: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u &amp;lt; v):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          f.write(&lt;span class=&quot;string&quot;&gt;&#39;  &quot;%s&quot; -- &quot;%s&quot;;\n&#39;&lt;/span&gt; % (u, v))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.write(&lt;span class=&quot;string&quot;&gt;&#39;}\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You’ll notice that the shape of the graph above is different than the shape of the first graph I showed.  Instead of using &lt;code&gt;dot&lt;/code&gt; to produce the output image for this graph, I instead used &lt;code&gt;circo&lt;/code&gt; (which attempts to draw the graph using a circular layout) and used a command line argument to ensure &lt;a href=&quot;http://stackoverflow.com/a/13420913/1110928&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodes wouldn’t overlap&lt;/a&gt;.  The resulting command was &lt;code&gt;$ circo -Goverlap=scale rig.dot -Tpng -o rig.png&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Graphs are an integral data structure for many computer science problems, yet are usually difficult to represent pictorially.  Graphviz can help reduce the amount of effort required to produce valuable debug output. In this post, I’ve provided a short example of the DOT format and some example code to output a graph in DOT form.  &lt;/p&gt;
&lt;p&gt;For users who want more detailed information on how to use Graphviz, I strongly recommend the &lt;a href=&quot;https://www.ocf.berkeley.edu/~eek/index.html/tiny_examples/thinktank/src/gv1.7c/doc/dotguide.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOT User’s Manual&lt;/a&gt; and reading the manpage (run &lt;code&gt;$ man dot&lt;/code&gt; in the terminal).&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Many computer science problems utilize &lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_%28discrete_mathematics%29&quot;&gt;graph&lt;/a&gt;-based data structures.  Their use can range from explicit inclusion in an algorithm-centric problem (like path-finding) to a more “behind-the-scenes” presence in Bayesian networks or descriptions of finite automata.  Unfortunately, visualizing large graphs can be difficult to do, especially for debugging.  Unlike lists or dictionaries, which can be represented clearly by plain text printing, depicting a graph tends to require more graphics overhead than is reasonable for most programmers to write simply for debugging purposes.  I’ve found that &lt;a href=&quot;http://graphviz.org/&quot;&gt;Graphviz&lt;/a&gt;, a free graph visualization utility, can be quite useful in debugging graph-related programs.&lt;/p&gt;
&lt;h2 id=&quot;Installing-Graphviz&quot;&gt;&lt;a href=&quot;#Installing-Graphviz&quot; class=&quot;headerlink&quot; title=&quot;Installing Graphviz&quot;&gt;&lt;/a&gt;Installing Graphviz&lt;/h2&gt;&lt;p&gt;If you’re on a Debian-based Linux OS (e.g. Ubuntu), you can install Graphviz using &lt;code&gt;apt-get&lt;/code&gt;.  Just run &lt;code&gt;$ sudo apt-get install graphviz&lt;/code&gt; and you’ll have everything you need to complete the steps in this blog post.  Mac OS X users can use &lt;code&gt;brew&lt;/code&gt; equivalently.&lt;/p&gt;
&lt;p&gt;Windows users should install using a binary downloaded from the &lt;a href=&quot;http://graphviz.org/Download_windows.php&quot;&gt;Graphviz Windows page&lt;/a&gt;, but there might be some issues with setting the &lt;code&gt;PATH&lt;/code&gt; variable for running in the commandline.&lt;/p&gt;
&lt;h2 id=&quot;Making-a-basic-graph&quot;&gt;&lt;a href=&quot;#Making-a-basic-graph&quot; class=&quot;headerlink&quot; title=&quot;Making a basic graph&quot;&gt;&lt;/a&gt;Making a basic graph&lt;/h2&gt;&lt;p&gt;Once you’ve installed, the next thing you’ll want to do is create a basic graph to ensure the installation succeeded and to gain practice using Graphviz tools.  We do this by creating a &lt;code&gt;*.dot&lt;/code&gt; file that describes the graph we wish to display.  If you’re the type of person who likes to jump right in and experiment first before reading too much, or if you love formal language specification, the &lt;a href=&quot;http://www.graphviz.org/content/dot-language&quot;&gt;DOT grammar&lt;/a&gt; is fairly readable and can give a quick introduction to creating DOT files.&lt;/p&gt;
&lt;p&gt;The below is a fairly representative DOT file to demonstrate some of the capabilities of Graphviz. Open your favorite text editor, copy/paste it in, and save it as &lt;code&gt;firstgraph.dot&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;firstgraph.dot&lt;/span&gt;&lt;a href=&quot;/blog/downloads/code/firstgraph.dot&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;digraph G {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Style information for nodes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A [style=&lt;span class=&quot;string&quot;&gt;&quot;filled&quot;&lt;/span&gt;, color=&lt;span class=&quot;string&quot;&gt;&quot;.05 .3 1.0&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Edge declarations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  A -&amp;gt; {B, C};&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  D -&amp;gt; E [label=&lt;span class=&quot;string&quot;&gt;&quot;-1&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  E -&amp;gt; F [label=&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  F -&amp;gt; D [label=&lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This creates a directed graph (also called a &lt;em&gt;digraph&lt;/em&gt;) with six nodes and two connected components.  Some of the edges have labels, and one of the nodes is colored.  After you’ve copied (or downloaded) this file, open up a terminal to the directory with &lt;code&gt;firstgraph.dot&lt;/code&gt; in it and run &lt;code&gt;$ dot firstgraph.dot -Tpng -o firstgraph.png&lt;/code&gt;.  The resulting image file should look something like the below:&lt;/p&gt;
&lt;img src=&quot;/blog/2016/03/08/Visualizing-Graphs-in-Program-Output/firstgraph.jpg&quot; alt=&quot;The rendered `firstgraph.dot`&quot; title=&quot;The rendered `firstgraph.dot`&quot;&gt;
    
    </summary>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/categories/computer-science/"/>
    
      <category term="tools" scheme="http://www.apnorton.com/blog/categories/computer-science/tools/"/>
    
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/tags/computer-science/"/>
    
  </entry>
  
  <entry>
    <title>Deranged Exams: An ICPC Problem</title>
    <link href="http://www.apnorton.com/blog/2015/10/15/Deranged-Exams-An-ICPC-Problem/"/>
    <id>http://www.apnorton.com/blog/2015/10/15/Deranged-Exams-An-ICPC-Problem/</id>
    <published>2015-10-16T00:24:00.000Z</published>
    <updated>2016-03-09T02:49:07.000Z</updated>
    
    <content type="html">&lt;p&gt;This past week, my ICPC team worked the 2013 Greater New York Regional problem packet.  One of my favorite problems in this set was Problem E: Deranged Exams.  The code required to solve this problem isn’t that complicated, but the math behind it is a little unusual.  In this post, I aim to explain the math and provide a solution to this problem.&lt;/p&gt;
&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description&quot;&gt;&lt;/a&gt;Problem Description&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;http://acmgnyr.org/year2013/e.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;full problem statement&lt;/a&gt; is archived online; in shortened form, we can consider the problem to be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a “matching” test of $n$ questions (each question maps to exactly one answer, and no two questions have the same answer), how many possible ways are there to answer at least the first $k$ questions wrong?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It turns out that there’s a really nice solution to this problem using a topic from combinatorics called “derangements.”  (Note that the problem title was a not-so-subtle hint towards the solution.)&lt;/p&gt;
&lt;h2 id=&quot;Derangements&quot;&gt;&lt;a href=&quot;#Derangements&quot; class=&quot;headerlink&quot; title=&quot;Derangements&quot;&gt;&lt;/a&gt;Derangements&lt;/h2&gt;&lt;p&gt;While the idea of a permutation should be familiar to most readers, the closely related topic of a derangement is rarely discussed in most undergraduate curriculum.  So, it is reasonable to start with a definition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A derangement is a permutation in which no element is in its original place.  The number of derangements on $n$ elements is denoted $D_n$; this is also called the subfactorial of $n$, denoted $!n$. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The sequence $\langle D_n\rangle$ is &lt;a href=&quot;https://oeis.org/A000166&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A000166&lt;/a&gt; in OEIS (a website with which, by the way, every competitive programmer should familiarize themselves).&lt;/p&gt;
&lt;p&gt;It turns out that there is both a recursive and an explicit formula for $D_n$:&lt;/p&gt;
&lt;span&gt;$$\begin{aligned}
D_n &amp;amp;= (-1)^n \sum_k\binom{n}{k} (-1)^k k! \\
&amp;amp;= n\cdot D_{n-1} + (-1)^n;\;(D_0=1)
\end{aligned}$$&lt;/span&gt;&lt;!-- Has MathJax --&gt;
&lt;p&gt;This is significant because we can use the explicit formulation for computing single values of derangements, or we can use dynamic programming to rapidly compute $D_n$ for relatively small $n$.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Problem-Approach&quot;&gt;&lt;a href=&quot;#Problem-Approach&quot; class=&quot;headerlink&quot; title=&quot;Problem Approach&quot;&gt;&lt;/a&gt;Problem Approach&lt;/h2&gt;&lt;p&gt;The key observation here is that, using the derangement formula, we may compute the number of ways to answer a given set of questions incorrectly, using only the answers corresponding to those questions.  Instead of focusing on the first $k$ questions, which we must answer incorrectly, let us look to the remaining $n-k$ questions.&lt;/p&gt;
&lt;p&gt;Consider the case when we answer $r$ questions correctly.  There are $\binom{n-k}{r}$ ways of choosing which $r$ questions we answer correctly (since the first $k$ must be wrong).&lt;/p&gt;
&lt;p&gt;The remaining $n-r$ questions must be answered incorrectly using only the answers to the same $n-r$ questions.  Using our knowledge of derangements, there are $!(n-r)$ ways to assign those incorrect answers.&lt;/p&gt;
&lt;p&gt;Finally, note that the number of correct answers, $r$ is bounded by $n-k$; summing over all possible values of $r$, we obtain:&lt;/p&gt;
&lt;p&gt;$$S(n, k) = \sum_{r=0}^{n-k} \binom{n-k}{r}\cdot !(n-r)$$&lt;/p&gt;
&lt;h2 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Code&quot; class=&quot;headerlink&quot; title=&quot;Code&quot;&gt;&lt;/a&gt;Code&lt;/h2&gt;&lt;p&gt;Equations are great, but implementation is required for ICPC.  First, we must consider input/output size.  The problem statement gives the following ranges for $n$ and $k$:&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;  1 \leq n \leq 17 \\&lt;br&gt;  0 \leq k \leq n&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;We can expect that this will fit in a 64-bit integer, as $n! \leq 2^{63}-1$ for $n\leq 20$.  Thus, we don’t even need to be careful in computing binomial coefficients due to intermediate overflow!  I’ll let the code (and comments) speak for itself:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.util.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Basic iterative factorial; just multiply all&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// the numbers less than or equal to n.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// returns 1 if n &amp;lt; 1 (which is important for n=0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; retval = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(n &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      retval *= n--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; retval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Naive binomial coefficient computation &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Generally, you need to watch overflow.  But,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// we can ignore that here because fact(17) &amp;lt; 2^63-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;binom&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fact(n)/(fact(k)*fact(n-k));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//While not recommended in general, we can use &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// a scanner because we&#39;re not reading a lot of input.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Scanner &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Precompute the derangement numbers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[] d = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// we might need values of D_n up to n=17&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, j=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i &amp;lt; d.length; i++, j*=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      d[i] = i*d[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] + j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Process the input&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; P = &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; caseNum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; caseNum &amp;lt; P; caseNum++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//S(n, k) = sum(binom(n-k, r)*d[n-r], r=0..n-k)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; ans = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; r &amp;lt;= n-k; r++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ans += binom(n-k, r)*d[n-r];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      System.out.&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d %d\n&quot;&lt;/span&gt;, caseNum+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Further-Reference&quot;&gt;&lt;a href=&quot;#Further-Reference&quot; class=&quot;headerlink&quot; title=&quot;Further Reference&quot;&gt;&lt;/a&gt;Further Reference&lt;/h2&gt;&lt;p&gt;Derangements are discussed in Concrete Mathematics by Graham, Knuth, and Patashnik on pages 193-196.  In those pages, the identities shown in this blog entry are derived.  Also discussed is a closely related problem that may be called $r$-derangements.&lt;/p&gt;
&lt;p&gt;In the $r$-derangement problem, we seek the number of arrangements in which exactly $r$ elements are in their original place.  (The number of $0$-derangements, then, is just $D_n$.)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This past week, my ICPC team worked the 2013 Greater New York Regional problem packet.  One of my favorite problems in this set was Problem E: Deranged Exams.  The code required to solve this problem isn’t that complicated, but the math behind it is a little unusual.  In this post, I aim to explain the math and provide a solution to this problem.&lt;/p&gt;
&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description&quot;&gt;&lt;/a&gt;Problem Description&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;http://acmgnyr.org/year2013/e.pdf&quot;&gt;full problem statement&lt;/a&gt; is archived online; in shortened form, we can consider the problem to be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a “matching” test of $n$ questions (each question maps to exactly one answer, and no two questions have the same answer), how many possible ways are there to answer at least the first $k$ questions wrong?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It turns out that there’s a really nice solution to this problem using a topic from combinatorics called “derangements.”  (Note that the problem title was a not-so-subtle hint towards the solution.)&lt;/p&gt;
&lt;h2 id=&quot;Derangements&quot;&gt;&lt;a href=&quot;#Derangements&quot; class=&quot;headerlink&quot; title=&quot;Derangements&quot;&gt;&lt;/a&gt;Derangements&lt;/h2&gt;&lt;p&gt;While the idea of a permutation should be familiar to most readers, the closely related topic of a derangement is rarely discussed in most undergraduate curriculum.  So, it is reasonable to start with a definition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A derangement is a permutation in which no element is in its original place.  The number of derangements on $n$ elements is denoted $D_n$; this is also called the subfactorial of $n$, denoted $!n$. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The sequence $\langle D_n\rangle$ is &lt;a href=&quot;https://oeis.org/A000166&quot;&gt;A000166&lt;/a&gt; in OEIS (a website with which, by the way, every competitive programmer should familiarize themselves).&lt;/p&gt;
&lt;p&gt;It turns out that there is both a recursive and an explicit formula for $D_n$:&lt;/p&gt;
&lt;span&gt;$$\begin{aligned}
D_n &amp;amp;= (-1)^n \sum_k\binom{n}{k} (-1)^k k! \\
&amp;amp;= n\cdot D_{n-1} + (-1)^n;\;(D_0=1)
\end{aligned}$$&lt;/span&gt;&lt;!-- Has MathJax --&gt;
&lt;p&gt;This is significant because we can use the explicit formulation for computing single values of derangements, or we can use dynamic programming to rapidly compute $D_n$ for relatively small $n$.&lt;/p&gt;
    
    </summary>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/categories/computer-science/"/>
    
      <category term="contests" scheme="http://www.apnorton.com/blog/categories/computer-science/contests/"/>
    
    
      <category term="algorithms" scheme="http://www.apnorton.com/blog/tags/algorithms/"/>
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
      <category term="contests" scheme="http://www.apnorton.com/blog/tags/contests/"/>
    
  </entry>
  
  <entry>
    <title>Eight Books on Math and Computer Science</title>
    <link href="http://www.apnorton.com/blog/2015/06/09/Eight-Books-on-Math-and-Computer-Science/"/>
    <id>http://www.apnorton.com/blog/2015/06/09/Eight-Books-on-Math-and-Computer-Science/</id>
    <published>2015-06-09T04:41:23.000Z</published>
    <updated>2016-03-09T02:50:25.000Z</updated>
    
    <content type="html">&lt;p&gt;A friend recently emailed me asking for titles of books I’d recommend to read over the summer, particularly to prepare for computer science and mathematics.  I’ve adapted my suggestions into this post.  I’d like to note that I’ve restricted my responses to “non-textbooks;” otherwise, I’d have several more additions that would increase the average page count and price quite drastically.  As such, these books don’t have problems to work or present an extreme level of detail, but in many cases they present enough information to provide a strong foundation and context for math and CS classes.&lt;/p&gt;
&lt;h2 id=&quot;From-Mathematics-to-Generic-Programming&quot;&gt;&lt;a href=&quot;#From-Mathematics-to-Generic-Programming&quot; class=&quot;headerlink&quot; title=&quot;From Mathematics to Generic Programming&quot;&gt;&lt;/a&gt;From Mathematics to Generic Programming&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Alexander Stepanov and Daniel Rose (&lt;a href=&quot;http://www.amazon.com/Mathematics-Generic-Programming-Alexander-Stepanov/dp/0321942043&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I will most likely write a separate blog post about this book.  I read it during the end of the fall semester and found that it presented a very interesting approach to designing reusable code by utilizing principles from abstract algebra.  It’s written to be accessible by someone who hasn’t studied abstract algebra yet, which means it also can serve as an introduction to that subject.&lt;/p&gt;
&lt;h2 id=&quot;CODE-The-Hidden-Language-of-Computer-Hardware-and-Software&quot;&gt;&lt;a href=&quot;#CODE-The-Hidden-Language-of-Computer-Hardware-and-Software&quot; class=&quot;headerlink&quot; title=&quot;CODE: The Hidden Language of Computer Hardware and Software&quot;&gt;&lt;/a&gt;CODE: The Hidden Language of Computer Hardware and Software&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Charles Petzold (&lt;a href=&quot;http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Four years ago, I wrote &lt;a href=&quot;http://robodesigners.blogspot.com/2011/04/code-hidden-language-of-computer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a review&lt;/a&gt; of this book on RoboDesigners.  At that time, my perspective was that of a high school student and I thought the book was interesting; with the additional perspective of a year of college study in Computer Science, I cannot recommend this book highly enough.&lt;/p&gt;
&lt;p&gt;By “building” a computer piece-by-piece from the idea of a relay through developing a simple assembly language, it covers nearly all of the material as the Digital Logic Design course I took, but in an easy-to-read book.  If you comprehend the material in this book, you will be able to coast through DLD.&lt;/p&gt;
&lt;h2 id=&quot;A-Mathematician’s-Apology&quot;&gt;&lt;a href=&quot;#A-Mathematician’s-Apology&quot; class=&quot;headerlink&quot; title=&quot;A Mathematician’s Apology&quot;&gt;&lt;/a&gt;A Mathematician’s Apology&lt;/h2&gt;&lt;p&gt;&lt;em&gt;G. H. Hardy (&lt;a href=&quot;http://www.amazon.com/Mathematicians-Apology-Canto-Classics/dp/110760463X/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When a mathematician with Hardy’s stature writes a book on why he studies math, it’s probably advisable to read it!  Multiple professors of mine have said it’s a book any mathematician should read and I wholeheartedly agree.  It’s really short (the printing I’ve linked above is only 154 pages), but the content is amazing.  Hardy addresses the complaints many have with pure math and embodies the spirit of “doing mathematics for mathematics’ sake.”  If you are thinking about pursuing a theoretical route in either CS or math, I highly recommend you read this book.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;The-Code-Book&quot;&gt;&lt;a href=&quot;#The-Code-Book&quot; class=&quot;headerlink&quot; title=&quot;The Code Book&quot;&gt;&lt;/a&gt;The Code Book&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Simon Singh (&lt;a href=&quot;http://www.amazon.com/Code-Book-Science-Secrecy-Cryptography/dp/0385495323/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I love codes–anything resembling secret or hidden knowledge has a particular allure.  Singh does a great job discussing the past, present, and likely future of codes, ciphers, and cryptography in this book.  Starting with Caesar Shift (what good historic code book doesn’t?) and traveling through centuries to discuss the Vigenère cipher, RSA encryption, and the general idea of quantum cryptography, this book gave me a broad understanding of where we are at now with codes and how we got here.  It also includes the clearest description of the actual flaws in Enigma that I’ve ever read.&lt;/p&gt;
&lt;h2 id=&quot;In-Pursuit-of-the-Unknown-17-Equations-that-Changed-the-World&quot;&gt;&lt;a href=&quot;#In-Pursuit-of-the-Unknown-17-Equations-that-Changed-the-World&quot; class=&quot;headerlink&quot; title=&quot;In Pursuit of the Unknown: 17 Equations that Changed the World&quot;&gt;&lt;/a&gt;In Pursuit of the Unknown: 17 Equations that Changed the World&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Ian Stewart (&lt;a href=&quot;http://www.amazon.com/Pursuit-Equations-That-Changed-World/dp/0465085989/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Every equation has a story–how was this truth discovered, who discovered it, and what exists now because of it?  This book examines 17 equations and their impact on society.  If you’re actually reading this blog, the early chapters will probably be old hat, but after (and including) Chapter 4 the content becomes quite interesting. &lt;/p&gt;
&lt;p&gt;Reading Chapter 4 helped me visualize vector fields for Vector Calculus and Differential Equations in the context of planetary movement (and it finally made me understand the age-old analogy for dense objects warping the fabric of spacetime).  The last chapter was also memorable for its description of a particular equation used in high-frequency stock trades, the misapplication of which Stewart claims was partially responsible for the 2008 recession.&lt;/p&gt;
&lt;h2 id=&quot;The-Music-of-the-Primes&quot;&gt;&lt;a href=&quot;#The-Music-of-the-Primes&quot; class=&quot;headerlink&quot; title=&quot;The Music of the Primes&quot;&gt;&lt;/a&gt;The Music of the Primes&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Marcus du Sautoy (&lt;a href=&quot;http://www.amazon.com/Music-Primes-Searching-Greatest-Mathematics/dp/0062064010/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It is said that Gauss once asserted that “Mathematics is the queen of the sciences and number theory is the queen of mathematics.”  This book outlines the history parts of this “queen of mathematics” that relate to prime numbers.  It includes mini-biographies on the people who made great breakthroughs in the search for a formula for the nth prime; obviously the story isn’t finished yet, but it’s a pretty neat overview of how primes are important, who made them important, and other related topics.&lt;/p&gt;
&lt;p&gt;As someone who finds Number Theory fascinating, I’d recommend this book especially to people who like Project Euler problems–not because it will help you solve the problems per-se, but because it provides some historical background to the people who developed the equations you use to solve Project Euler problems.&lt;/p&gt;
&lt;h2 id=&quot;To-Engineer-Is-Human&quot;&gt;&lt;a href=&quot;#To-Engineer-Is-Human&quot; class=&quot;headerlink&quot; title=&quot;To Engineer Is Human&quot;&gt;&lt;/a&gt;To Engineer Is Human&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Henry Petroski (&lt;a href=&quot;http://www.amazon.com/To-Engineer-Is-Human-Successful/dp/0679734163&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a wonderfully dry book–one that might bore some people, but I &lt;em&gt;loved&lt;/em&gt; it.  (I actually read this right after reading &lt;em&gt;CODE&lt;/em&gt;.)   Petroski discusses the role of failure in design, why the principles of engineering are intuitively “built-in” to the human brain, and how engineers must account for error in their designs.  The most thought-provoking and the single most vivid idea that has stuck with me since reading this book was a connection he drew between computerized design and an increased failure rate in new products (toys, furniture, or even buildings).&lt;/p&gt;
&lt;h2 id=&quot;The-Abolition-of-Man&quot;&gt;&lt;a href=&quot;#The-Abolition-of-Man&quot; class=&quot;headerlink&quot; title=&quot;The Abolition of Man&quot;&gt;&lt;/a&gt;The Abolition of Man&lt;/h2&gt;&lt;p&gt;&lt;em&gt;C. S. Lewis (&lt;a href=&quot;http://www.amazon.com/The-Abolition-Man-C-Lewis/dp/0060652942&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;C. S. Lewis is known primarily as the author of &lt;em&gt;The Chronicles of Narnia&lt;/em&gt;, then as a Christian Apologist.  So then, &lt;em&gt;why&lt;/em&gt; am I asserting that this particular book is relevant to all computer scientists?  In fact, this book is of particular interest to anyone working in a field of applied science.  It provokes thought on why we’re solving the problems that we are and why we’re even interested in the sciences.  In particular, it discusses the effect of a morality outside ourselves on the purpose of science; the third and final chapter paints a vivid picture of what happens when we reduce mankind simply to “nature.”  This book bears re-reading, and perhaps someday I’ll write another blog post on why every scientist (applied or not) should read this book.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;A friend recently emailed me asking for titles of books I’d recommend to read over the summer, particularly to prepare for computer science and mathematics.  I’ve adapted my suggestions into this post.  I’d like to note that I’ve restricted my responses to “non-textbooks;” otherwise, I’d have several more additions that would increase the average page count and price quite drastically.  As such, these books don’t have problems to work or present an extreme level of detail, but in many cases they present enough information to provide a strong foundation and context for math and CS classes.&lt;/p&gt;
&lt;h2 id=&quot;From-Mathematics-to-Generic-Programming&quot;&gt;&lt;a href=&quot;#From-Mathematics-to-Generic-Programming&quot; class=&quot;headerlink&quot; title=&quot;From Mathematics to Generic Programming&quot;&gt;&lt;/a&gt;From Mathematics to Generic Programming&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Alexander Stepanov and Daniel Rose (&lt;a href=&quot;http://www.amazon.com/Mathematics-Generic-Programming-Alexander-Stepanov/dp/0321942043&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I will most likely write a separate blog post about this book.  I read it during the end of the fall semester and found that it presented a very interesting approach to designing reusable code by utilizing principles from abstract algebra.  It’s written to be accessible by someone who hasn’t studied abstract algebra yet, which means it also can serve as an introduction to that subject.&lt;/p&gt;
&lt;h2 id=&quot;CODE-The-Hidden-Language-of-Computer-Hardware-and-Software&quot;&gt;&lt;a href=&quot;#CODE-The-Hidden-Language-of-Computer-Hardware-and-Software&quot; class=&quot;headerlink&quot; title=&quot;CODE: The Hidden Language of Computer Hardware and Software&quot;&gt;&lt;/a&gt;CODE: The Hidden Language of Computer Hardware and Software&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Charles Petzold (&lt;a href=&quot;http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Four years ago, I wrote &lt;a href=&quot;http://robodesigners.blogspot.com/2011/04/code-hidden-language-of-computer.html&quot;&gt;a review&lt;/a&gt; of this book on RoboDesigners.  At that time, my perspective was that of a high school student and I thought the book was interesting; with the additional perspective of a year of college study in Computer Science, I cannot recommend this book highly enough.&lt;/p&gt;
&lt;p&gt;By “building” a computer piece-by-piece from the idea of a relay through developing a simple assembly language, it covers nearly all of the material as the Digital Logic Design course I took, but in an easy-to-read book.  If you comprehend the material in this book, you will be able to coast through DLD.&lt;/p&gt;
&lt;h2 id=&quot;A-Mathematician’s-Apology&quot;&gt;&lt;a href=&quot;#A-Mathematician’s-Apology&quot; class=&quot;headerlink&quot; title=&quot;A Mathematician’s Apology&quot;&gt;&lt;/a&gt;A Mathematician’s Apology&lt;/h2&gt;&lt;p&gt;&lt;em&gt;G. H. Hardy (&lt;a href=&quot;http://www.amazon.com/Mathematicians-Apology-Canto-Classics/dp/110760463X/&quot;&gt;on Amazon&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When a mathematician with Hardy’s stature writes a book on why he studies math, it’s probably advisable to read it!  Multiple professors of mine have said it’s a book any mathematician should read and I wholeheartedly agree.  It’s really short (the printing I’ve linked above is only 154 pages), but the content is amazing.  Hardy addresses the complaints many have with pure math and embodies the spirit of “doing mathematics for mathematics’ sake.”  If you are thinking about pursuing a theoretical route in either CS or math, I highly recommend you read this book.&lt;/p&gt;
    
    </summary>
    
      <category term="book-reviews" scheme="http://www.apnorton.com/blog/categories/book-reviews/"/>
    
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/tags/computer-science/"/>
    
      <category term="general-computing" scheme="http://www.apnorton.com/blog/tags/general-computing/"/>
    
      <category term="books" scheme="http://www.apnorton.com/blog/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>How to Learn Haskell</title>
    <link href="http://www.apnorton.com/blog/2014/07/14/How-to-Learn-Haskell/"/>
    <id>http://www.apnorton.com/blog/2014/07/14/How-to-Learn-Haskell/</id>
    <published>2014-07-15T00:55:08.000Z</published>
    <updated>2015-12-25T04:48:10.000Z</updated>
    
    <content type="html">&lt;p&gt;To grow my programming repertoire, I decided to learn a functional language; at the recommendation of a friend, I selected &lt;a href=&quot;http://www.haskell.org/haskellwiki/Haskell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Haskell&lt;/a&gt;. Thus far, it seems great.  As a mathematician at heart, I love the way that the notation and language constructs resemble math (list comprehensions, tuples, function composition, etc).  In this blog post, I will outline the major resources I am using to learn Haskell.&lt;/p&gt;
&lt;p&gt;To learn Haskell, I am using the ebook &lt;a href=&quot;http://learnyouahaskell.com/chapters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Learn You a Haskell for Great Good&lt;/em&gt;&lt;/a&gt;.  Yes–terrible grammar in the title, but it’s (fairly) grammatically correct on the inside.  This is a great introduction to Haskell, although I’d highly recommend prior knowledge of another programming language like Java or C++.&lt;/p&gt;
&lt;p&gt;Unfortunately, that ebook is somewhat lacking in practice problems.  It does have examples, but there isn’t a true “exercise” section like one would find in a textbook.  This is a common fault with online programming tutorials; to be honest, creating a good exercise set is &lt;em&gt;hard&lt;/em&gt; work.  To remedy this problem, I turned to a favorite site of mine, &lt;a href=&quot;http://www.hackerrank.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HackerRank.com&lt;/a&gt;.  While designed for competitive programmers, this site also has an “introductory” set of functional programming challenges (see &lt;a href=&quot;https://www.hackerrank.com/categories/fp/intro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;).  These range in difficulty from very easy to extremely hard.  This provides a great compliment to the tutorial I referenced above.&lt;/p&gt;
&lt;p&gt;Finally, one last resource I am going to use after finishing &lt;em&gt;Learn You a Haskell&lt;/em&gt; is a &lt;a href=&quot;http://shuklan.com/haskell/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;set of lectures&lt;/a&gt; by former University of Virginia student-teacher &lt;a href=&quot;http://shukla.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nishant Shukla&lt;/a&gt;.  Although I have not been able to view them in great detail, they appear to present a great introduction to Haskell.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;To grow my programming repertoire, I decided to learn a functional language; at the recommendation of a friend, I selected &lt;a href=&quot;http:
    
    </summary>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/categories/computer-science/"/>
    
      <category term="programming-languages" scheme="http://www.apnorton.com/blog/categories/computer-science/programming-languages/"/>
    
    
      <category term="functional-programming" scheme="http://www.apnorton.com/blog/tags/functional-programming/"/>
    
      <category term="websites" scheme="http://www.apnorton.com/blog/tags/websites/"/>
    
  </entry>
  
  <entry>
    <title>Factorization and Divisor Count</title>
    <link href="http://www.apnorton.com/blog/2014/07/14/Factorization-and-Divisor-Count/"/>
    <id>http://www.apnorton.com/blog/2014/07/14/Factorization-and-Divisor-Count/</id>
    <published>2014-07-14T15:59:15.000Z</published>
    <updated>2016-03-09T02:53:29.000Z</updated>
    
    <content type="html">&lt;p&gt;How many divisors are there of the number $1281942112$?  It turns out that determining the answer to this problem is (at most) only as difficult as determining the prime factorization of the number.  In this blog post, I will outline a solution to this (and similar) problems.&lt;/p&gt;
&lt;h2 id=&quot;The-Math&quot;&gt;&lt;a href=&quot;#The-Math&quot; class=&quot;headerlink&quot; title=&quot;The Math&quot;&gt;&lt;/a&gt;The Math&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;http://mathworld.wolfram.com/FundamentalTheoremofArithmetic.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fundamental Theorem of Arithmetic&lt;/a&gt; guarantees each positive integer greater than $1$ a unique prime factorization.  We write this factorization as:&lt;/p&gt;
&lt;p&gt;$$N = p_0^{e_0}p_1^{e_1}\cdots p_n^{e_n}$$&lt;/p&gt;
&lt;p&gt;where $p_k$ is a prime number, and $e_k$ is its corresponding exponent.  This provides us with useful information regarding divisors of $N$: any divisor of $N$ must be comprised of some combination of those prime factors (and exponents).  Specifically, we can define the divisor, $D$, as:&lt;/p&gt;
&lt;p&gt;$$D = p_0^{a_0}p_1^{a_1}\cdots p_n^{a_n}$$&lt;/p&gt;
&lt;p&gt;where the $p_k$ are the same as in the factorization of $N$ and $a_k \in {0, 1, \ldots, e_k}$.  To find the total number of divisors, we multiply together the number of options we have for each exponent.  That is,&lt;/p&gt;
&lt;p&gt;$$\text{Number of Divisors}\; = (e_0+1)(e_1+1)\cdots(e_n + 1)$$&lt;/p&gt;
&lt;p&gt;Example:  Consider $N = 20$.  In this case, $N$ has $6$ divisors; to determine this without needing to list them all, we may note that $N = 2^2\cdot 5^1$.  Using the notation described above, this means that $p_0 = 2,\;p_1 = 5$ and $e_0 = 2\;e_1 = 1$.  Each of our divisors will be of the form $2^{a_0}\cdot 5^{a_1}$, where $a_0$ could be $0, 1,$ or $2$ and $a_1$ could be $0$ or $1$.  Since we have $e_0+1 = 3$ options for $a_0$ and $e_1+1 = 2$ options for $a_1$, we have $3\cdot 2 = 6$ total divisors.  In case you were wondering, the list of divisors is:&lt;/p&gt;
&lt;p&gt;$${2^0 5^0, 2^1 5^0,2^2 5^0,2^0 5^1,2^1 5^1,2^2 5^1}$$&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;The-Program&quot;&gt;&lt;a href=&quot;#The-Program&quot; class=&quot;headerlink&quot; title=&quot;The Program&quot;&gt;&lt;/a&gt;The Program&lt;/h2&gt;&lt;p&gt;We’re not out of the woods yet–we have a formula, but we need to write a program to make use of it.  The first thing our program needs is a list of primes.  I’m going to assume you have a function already that can generate a list of primes.  A prime-listing function is an important tool in any programmer’s toolkit, but I’ll save that for a future post.&lt;/p&gt;
&lt;p&gt;The pseudocode for our program is below:&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;numberOfDivisors: int &lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt; -&amp;gt; int divisorCount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  divisorCount = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (p = 1 to &lt;span class=&quot;built_in&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;)) &amp;amp;&amp;amp; p prime):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exponent = 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Determine exponent of p in prime factorization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (p divides &lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      exponent++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt; / p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//Update divisorCount&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     divisorCount = divisorCount * (exponent + 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//In this case, there is one prime factor greater than the square root of N&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;N&lt;/span&gt; != 1) divisorCount = divisorCount * 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; divisorCount&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This is mostly straightforward: We iterate through all prime numbers less than the square root of N.  For each prime, we determine how many times it divides N–this is that prime’s exponent.  We then multiply the current divisor count by one more than the exponent.  I have pushed an update to my &lt;a href=&quot;https://github.com/apnorton/math&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;math GitHub repository&lt;/a&gt; that includes a Java version of this algorithm in NumberTheory.java.&lt;/p&gt;
&lt;p&gt;If we kept track of which primes divide $N$ (for example, adding them to a List whenever we enter the while loop) this program is easily modified to output the prime factorization of a number.&lt;/p&gt;
&lt;h2 id=&quot;The-Analysis&quot;&gt;&lt;a href=&quot;#The-Analysis&quot; class=&quot;headerlink&quot; title=&quot;The Analysis&quot;&gt;&lt;/a&gt;The Analysis&lt;/h2&gt;&lt;p&gt;Before analyzing the performance of the algorithm, it would be best to explain why we only need to use primes less than $\sqrt{N}$, not primes less than $N$.  This is because &lt;strong&gt;there can only be one prime factor of $N$ greater than $\sqrt{N}$, and (if there is one) it must have only be raised to the $1$st power.&lt;/strong&gt;  A proof by contradiction works well here (I’m skipping some rigor, please don’t kill me):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Assume that there are two prime factors (not necessarily unique) $p$ and $q$ of $N$, such that $p,q \gt \sqrt{N}$.  Let the product of the remaining prime factors be some integer $m$.  Then we have:&lt;/p&gt;
&lt;p&gt;   $$\begin{align}&lt;br&gt;       N &amp;amp;= p\cdot q\cdot m \&lt;br&gt;         &amp;amp;\le p\cdot q \&lt;br&gt;         &amp;amp;\lt \sqrt{N}\sqrt{N}\&lt;br&gt;         &amp;amp;\lt N\end{align}$$&lt;/p&gt;
&lt;p&gt;This is clearly a contradiction, thus we have proven that there cannot be at least two prime factors of $N$ greater than $\sqrt{N}$.  Equivalently, there may only at most one prime factor of $N$ greater than $\sqrt{N}$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This explains why we don’t need to use primes greater than $\sqrt{N}$: if, after “dividing out” all primes less than $\sqrt{N}$, we are left with a number, then that number must be the single prime factor of $N$ greater than $\sqrt{N}$.&lt;/p&gt;
&lt;p&gt;On to the performance of the algorithm.  Assuming we are &lt;em&gt;given&lt;/em&gt; a list of prime numbers (and don’t have to compute them), this procedure has a time complexity of $\mathcal{O}\left(\pi\left(\sqrt{N}\right)\text{lg}(N)\right)$ and $\Omega\left(\pi\left(\sqrt{N}\right)\right)$, where $\pi(x)$ is the &lt;a href=&quot;http://mathworld.wolfram.com/PrimeCountingFunction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;prime counting function&lt;/a&gt; and $N$ is the input number.  ($\Omega$ provides a lower bound, and $\mathcal{O}$ provides an upper bound.)  Let’s see why.&lt;/p&gt;
&lt;p&gt;We have an outer-most for loop that makes one iteration for each prime less than $\sqrt{N}$.  This gives us the “$\pi\left(\sqrt{N}\right)$” part of the bounds.  For the lower bound, we would assume the inside of the for loop executes in constant time, every time.  (That is, we never enter the while loop.)  This occurs when $N$ is a prime number.  For the upper bound, we may assume that we execute the while loop at most $\text{lg}(N)$ times each iteration.  This is because $\text{lg}(N) = \log_2(N) \gt \log_b(N)$ for $N \gt 2$ and integer $b\gt 2$, and $\lfloor\log_{p_k}(N)\rfloor$ provides a fairly close upper bound on the exponent of $p_k$ in the prime factorization of $N$.&lt;/p&gt;
&lt;p&gt;The upper bound can be improved by performing some summation and simplification, but it’s close enough to show how fast this algorithm is.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;How many divisors are there of the number $1281942112$?  It turns out that determining the answer to this problem is (at most) only as difficult as determining the prime factorization of the number.  In this blog post, I will outline a solution to this (and similar) problems.&lt;/p&gt;
&lt;h2 id=&quot;The-Math&quot;&gt;&lt;a href=&quot;#The-Math&quot; class=&quot;headerlink&quot; title=&quot;The Math&quot;&gt;&lt;/a&gt;The Math&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;http://mathworld.wolfram.com/FundamentalTheoremofArithmetic.html&quot;&gt;Fundamental Theorem of Arithmetic&lt;/a&gt; guarantees each positive integer greater than $1$ a unique prime factorization.  We write this factorization as:&lt;/p&gt;
&lt;p&gt;$$N = p_0^{e_0}p_1^{e_1}\cdots p_n^{e_n}$$&lt;/p&gt;
&lt;p&gt;where $p_k$ is a prime number, and $e_k$ is its corresponding exponent.  This provides us with useful information regarding divisors of $N$: any divisor of $N$ must be comprised of some combination of those prime factors (and exponents).  Specifically, we can define the divisor, $D$, as:&lt;/p&gt;
&lt;p&gt;$$D = p_0^{a_0}p_1^{a_1}\cdots p_n^{a_n}$$&lt;/p&gt;
&lt;p&gt;where the $p_k$ are the same as in the factorization of $N$ and $a_k \in {0, 1, \ldots, e_k}$.  To find the total number of divisors, we multiply together the number of options we have for each exponent.  That is,&lt;/p&gt;
&lt;p&gt;$$\text{Number of Divisors}\; = (e_0+1)(e_1+1)\cdots(e_n + 1)$$&lt;/p&gt;
&lt;p&gt;Example:  Consider $N = 20$.  In this case, $N$ has $6$ divisors; to determine this without needing to list them all, we may note that $N = 2^2\cdot 5^1$.  Using the notation described above, this means that $p_0 = 2,\;p_1 = 5$ and $e_0 = 2\;e_1 = 1$.  Each of our divisors will be of the form $2^{a_0}\cdot 5^{a_1}$, where $a_0$ could be $0, 1,$ or $2$ and $a_1$ could be $0$ or $1$.  Since we have $e_0+1 = 3$ options for $a_0$ and $e_1+1 = 2$ options for $a_1$, we have $3\cdot 2 = 6$ total divisors.  In case you were wondering, the list of divisors is:&lt;/p&gt;
&lt;p&gt;$${2^0 5^0, 2^1 5^0,2^2 5^0,2^0 5^1,2^1 5^1,2^2 5^1}$$&lt;/p&gt;
    
    </summary>
    
      <category term="math" scheme="http://www.apnorton.com/blog/categories/math/"/>
    
      <category term="number-theory" scheme="http://www.apnorton.com/blog/categories/math/number-theory/"/>
    
    
      <category term="algorithms" scheme="http://www.apnorton.com/blog/tags/algorithms/"/>
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
      <category term="project-euler" scheme="http://www.apnorton.com/blog/tags/project-euler/"/>
    
      <category term="number-theory" scheme="http://www.apnorton.com/blog/tags/number-theory/"/>
    
  </entry>
  
  <entry>
    <title>&quot;Big-O&quot; notation: An Introduction to Asymptotics of Loops</title>
    <link href="http://www.apnorton.com/blog/2014/06/09/Big-O-notation-An-Introduction-to-Asymptotics-of-Loops/"/>
    <id>http://www.apnorton.com/blog/2014/06/09/Big-O-notation-An-Introduction-to-Asymptotics-of-Loops/</id>
    <published>2014-06-10T03:28:45.000Z</published>
    <updated>2016-03-09T02:53:45.000Z</updated>
    
    <content type="html">&lt;p&gt;Algorithmic efficiency is imperative for success in programming competitions; your programs must be accurate and fast.  To help evaluate algorithms for speed, computer scientists focus on what is called  “asymptotics,” or “asymptotic analysis.”  The key question answered by asymptotics is: &lt;strong&gt;“When your input gets &lt;em&gt;really&lt;/em&gt; big, how many steps does your program take?”&lt;/strong&gt;  This post seeks to explain basic asymptotic analysis and its application to computing simple program runtime.&lt;/p&gt;
&lt;p&gt;The underlying principle of asymptotic analysis is that a program’s runtime depends on the number of &lt;em&gt;elementary operations&lt;/em&gt; it performs.  The fewer elementary operations, the faster the program (and vice-versa).  What do I mean by “elementary operation?”  By this, I refer to any operation such that the runtime is not affected by the input size.  This is more commonly referred to as a &lt;em&gt;constant-time&lt;/em&gt; operation.  Examples of such operations are assignment, basic arithmetic operations (&lt;code&gt;+, -, *, /, %&lt;/code&gt;), accessing an array element, increment/decrement operations, function returns, and boolean expressions. &lt;/p&gt;
&lt;h2 id=&quot;A-First-Example&quot;&gt;&lt;a href=&quot;#A-First-Example&quot; class=&quot;headerlink&quot; title=&quot;A First Example&quot;&gt;&lt;/a&gt;A First Example&lt;/h2&gt;&lt;p&gt;So, a good way of gauging the runtime of a program is to count the number of elementary operations it performs.  Let’s jump right in by analyzing a simple program. &lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; N) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Obviously, this program always returns $N$, so the loop is unnecessary.  However, let’s just analyze the method as-is.&lt;/p&gt;
&lt;p&gt;Lines 2 and 7 each contribute one constant-time operation.  The loop contributes two constant-time operations per iteration (one for the comparison, one for the increment), plus one extra constant-time operation for the final comparison that terminates the loop.  So, the total number of operations is:&lt;/p&gt;
&lt;p&gt;$$1 + 1 + \underbrace{\sum_{i = 0}^N 2}_{\text{loop operations}} + 1 = 3 + 2N$$&lt;/p&gt;
&lt;p&gt;(Notice how I used sigma (summation) notation for counting a loop’s operation. This is useful, because loops and sigma notation behave in much the same way.)&lt;/p&gt;
&lt;p&gt;Thus, it will take $3+2N$ operations to perform that method, given an input $N$.  If each operation takes $2\times 10^{-9}$ (about the speed of a 2 GHz processor), it would take 5 seconds to run this program for an input of $N=10^{10}$.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Let’s-make-that-easier…&quot;&gt;&lt;a href=&quot;#Let’s-make-that-easier…&quot; class=&quot;headerlink&quot; title=&quot;Let’s make that easier…&quot;&gt;&lt;/a&gt;Let’s make that easier…&lt;/h2&gt;&lt;p&gt;That was a lot of work for such a simple result; is there an easier way to get a similar answer?  Fortunately, the answer is &lt;strong&gt;&lt;em&gt;yes!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, let us introduce something that we will call “Big-O notation.”  This is a way of describing the long-term growth of a function.  The rigorous definition of Big-O is beyond the scope of this blog, but the following should suffice:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We say $f(n)$ is $\mathcal{O}(g(n))$ if and only if a constant multiple of $g(n)$ is greater than $f(n)$, when $n$ is sufficiently large.  Simply put, this means that, in the long term, $g$ grows as fast or faster than $f$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As an example, we can say that $f(n) = 3n+2$ is $\mathcal{O}(n)$, because the function $g(n) = n$ grows exactly as fast as $f(n)$.  Or, we can say, $f$ is $\mathcal{O}(n^2)$, because $n^2$ grows faster than $f$, for sufficiently large $n$.  Basically, this means we can ignore two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We can ignore anything that is “small” in the long-term.  For example, if $f(x) = 4x^3 + 2x + 3 + \frac{1}{x}$, everything except the “$4x^3$” part becomes small (in comparison) as $x$ gets big.&lt;/li&gt;
&lt;li&gt;We can also ignore coefficients.  That is, we don’t have to worry about the difference between $4x^3$ and $x^3$.  As $x$ gets really big, the two graphs are so close that it doesn’t really matter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To apply this to algorithm analysis, this means that we only have to worry about the “biggest time-user,” rather than all the individual steps.  For most simple programs, this means focusing on loops.  (In advanced problems, you must account for recursion.)&lt;/p&gt;
&lt;p&gt;Next, we recall that a single loop can be represented with a single summation sign.  One can fairly quickly see that a nested loop can be represented with a “sum of sums,” or multiple, nested summation signs.  It can be proven that:&lt;/p&gt;
&lt;p&gt;$$ \underbrace{\sum_N\left(\sum_N\left(\cdots\sum_N f(N)\right)\right)}_{k \text{ summation signs}} = \mathcal{O}(N^k\cdot f(N)) $$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important Result&lt;/strong&gt;&lt;br&gt;Interpreted into programmer-speak, this means that &lt;em&gt;a program with nested loops (each executing ~$N$ times) to a maximum depth of $k$ will take $\mathcal{O}(N^k)$ operations to complete said loops.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Another-Example&quot;&gt;&lt;a href=&quot;#Another-Example&quot; class=&quot;headerlink&quot; title=&quot;Another Example&quot;&gt;&lt;/a&gt;Another Example&lt;/h2&gt;&lt;p&gt;So, let’s apply this idea to a bit more complicated program:&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; test(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; N; i++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i&lt;span class=&quot;comment&quot;&gt;; j &amp;lt; N; j++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      total++&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now we have a nested loop!  Looking at this program, we realize that the “deepest” nesting is only $2$ deep.  Thus, by our important result, we know that this program runs in $\mathcal{O}(N^2)$ time.&lt;/p&gt;
&lt;p&gt;This means, that as $N$ gets very large, doubling the input will result in a &lt;em&gt;quadruple&lt;/em&gt; increase in runtime.&lt;/p&gt;
&lt;h2 id=&quot;Other-Notes&quot;&gt;&lt;a href=&quot;#Other-Notes&quot; class=&quot;headerlink&quot; title=&quot;Other Notes&quot;&gt;&lt;/a&gt;Other Notes&lt;/h2&gt;&lt;p&gt;Obviously, there are more cases that can arise in algorithm analysis, instead of the simple loops given above.  For example, recursion and atypical loops (e.g. loops that double the counter each iteration, rather than adding one) require other methods than the “Important Result” I gave here.  Fortunately, there are a few common designations that arise:&lt;/p&gt;
&lt;p&gt;$$ \mathcal{O}(\log_2(n)),\;\mathcal{O}(n^k),\;\mathcal{O}(2^n),\;\mathcal{O}(n!),\;\mathcal{O}(n^n) $$&lt;/p&gt;
&lt;p&gt;I will note that I have written the above in increasing order of runtime.  That is, an algorithm that runs in $\mathcal{O}(\log_2(n))$ is faster than one that runs in $\mathcal{O}(2^n)$, etc.&lt;/p&gt;
&lt;p&gt;One can spend many hours studying asymptotic calculations.  In fact, there’s an entire chapter devoted to this in Concrete Mathematics by Graham, Knuth, and Patashink.  (I &lt;em&gt;highly&lt;/em&gt; recommend this book to anyone interested in programming; it is, quite literally, the best book I have ever opened related to computer science.)  For a thorough guide of the application of asymptotic calculations to programs, I recommend consulting a good Algorithms and Data Structures text.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Algorithmic efficiency is imperative for success in programming competitions; your programs must be accurate and fast.  To help evaluate algorithms for speed, computer scientists focus on what is called  “asymptotics,” or “asymptotic analysis.”  The key question answered by asymptotics is: &lt;strong&gt;“When your input gets &lt;em&gt;really&lt;/em&gt; big, how many steps does your program take?”&lt;/strong&gt;  This post seeks to explain basic asymptotic analysis and its application to computing simple program runtime.&lt;/p&gt;
&lt;p&gt;The underlying principle of asymptotic analysis is that a program’s runtime depends on the number of &lt;em&gt;elementary operations&lt;/em&gt; it performs.  The fewer elementary operations, the faster the program (and vice-versa).  What do I mean by “elementary operation?”  By this, I refer to any operation such that the runtime is not affected by the input size.  This is more commonly referred to as a &lt;em&gt;constant-time&lt;/em&gt; operation.  Examples of such operations are assignment, basic arithmetic operations (&lt;code&gt;+, -, *, /, %&lt;/code&gt;), accessing an array element, increment/decrement operations, function returns, and boolean expressions. &lt;/p&gt;
&lt;h2 id=&quot;A-First-Example&quot;&gt;&lt;a href=&quot;#A-First-Example&quot; class=&quot;headerlink&quot; title=&quot;A First Example&quot;&gt;&lt;/a&gt;A First Example&lt;/h2&gt;&lt;p&gt;So, a good way of gauging the runtime of a program is to count the number of elementary operations it performs.  Let’s jump right in by analyzing a simple program. &lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i &amp;lt; N) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Obviously, this program always returns $N$, so the loop is unnecessary.  However, let’s just analyze the method as-is.&lt;/p&gt;
&lt;p&gt;Lines 2 and 7 each contribute one constant-time operation.  The loop contributes two constant-time operations per iteration (one for the comparison, one for the increment), plus one extra constant-time operation for the final comparison that terminates the loop.  So, the total number of operations is:&lt;/p&gt;
&lt;p&gt;$$1 + 1 + \underbrace{\sum_{i = 0}^N 2}_{\text{loop operations}} + 1 = 3 + 2N$$&lt;/p&gt;
&lt;p&gt;(Notice how I used sigma (summation) notation for counting a loop’s operation. This is useful, because loops and sigma notation behave in much the same way.)&lt;/p&gt;
&lt;p&gt;Thus, it will take $3+2N$ operations to perform that method, given an input $N$.  If each operation takes $2\times 10^{-9}$ (about the speed of a 2 GHz processor), it would take 5 seconds to run this program for an input of $N=10^{10}$.&lt;/p&gt;
    
    </summary>
    
      <category term="computer-science" scheme="http://www.apnorton.com/blog/categories/computer-science/"/>
    
      <category term="algorithms" scheme="http://www.apnorton.com/blog/categories/computer-science/algorithms/"/>
    
    
      <category term="algorithms" scheme="http://www.apnorton.com/blog/tags/algorithms/"/>
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Green&#39;s Theorem and the Area of Polygons</title>
    <link href="http://www.apnorton.com/blog/2014/06/05/Greens-Theorem-and-The-Area-of-Polygons/"/>
    <id>http://www.apnorton.com/blog/2014/06/05/Greens-Theorem-and-The-Area-of-Polygons/</id>
    <published>2014-06-05T22:48:45.000Z</published>
    <updated>2015-12-25T01:31:12.000Z</updated>
    
    <content type="html">&lt;p&gt;I am an avid member of the &lt;a href=&quot;http://math.stackexchange.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Math.StackExchange&lt;/a&gt; community.  We have recently reached a milestone, as our request to create a site blog has been approved by the Stack Exchange administration. I volunteered to write a post which I believe should be useful to competition programmers.&lt;/p&gt;
&lt;p&gt;Using Green’s Theorem, &lt;a href=&quot;http://math.blogoverflow.com/2014/06/04/greens-theorem-and-area-of-polygons/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this post&lt;/a&gt; derives a formula for the area of any simple polygon, dependent solely on the coordinates of the vertices.  This is useful for some computational geometry problems in programming; for example, the formula can be used to compute the area of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Convex_hull&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;convex hull&lt;/a&gt; of a set of points.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I am an avid member of the &lt;a href=&quot;http://math.stackexchange.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Math.StackExchange&lt;/a&gt; community.  We h
    
    </summary>
    
      <category term="math" scheme="http://www.apnorton.com/blog/categories/math/"/>
    
      <category term="computational-geometry" scheme="http://www.apnorton.com/blog/categories/math/computational-geometry/"/>
    
    
      <category term="math" scheme="http://www.apnorton.com/blog/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://www.apnorton.com/blog/2014/05/23/Hello-World/"/>
    <id>http://www.apnorton.com/blog/2014/05/23/Hello-World/</id>
    <published>2014-05-24T03:58:00.000Z</published>
    <updated>2015-12-25T01:24:40.000Z</updated>
    
    <content type="html">&lt;p&gt;After managing a fairly successful blog for many years about competitive robotics, I am attempting to re-brand myself as I begin my studies in the field of Computer Science and Mathematics.&lt;/p&gt;
&lt;p&gt;This blog will be the place I post interesting pieces of code I either develop or find, as well as math concepts useful to competitive programmers.  This blog will focus heavily on ACM-style competitions, and may occasionally contain hints or my solutions to problems from sites like USACO or UVA Online Judge.  I will attempt to post most of my code from here on a GitHub repository, but I’m still experimenting with that.&lt;/p&gt;
&lt;p&gt;Java is my “native language,” although I know Visual BASIC, C++ to a fair extent (few people can actually say they “really know” C++), and some Python.  I’ll try to mix up the languages I post (I’ll have a tag for each language), but I predict most of my posts will be Java-oriented.&lt;/p&gt;
&lt;p&gt;As always, topic suggestions are welcome via comments on any post.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;After managing a fairly successful blog for many years about competitive robotics, I am attempting to re-brand myself as I begin my studi
    
    </summary>
    
    
      <category term="meta" scheme="http://www.apnorton.com/blog/tags/meta/"/>
    
  </entry>
  
</feed>
